<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>手动实现apply-call-bind</title>
      <link href="/2019/08/20/2019-08-20-%E6%89%8B%E5%8A%A8%E5%AE%9E%E7%8E%B0apply-call-bind/"/>
      <url>/2019/08/20/2019-08-20-%E6%89%8B%E5%8A%A8%E5%AE%9E%E7%8E%B0apply-call-bind/</url>
      
        <content type="html"><![CDATA[<h3 id="apply"><a href="#apply" class="headerlink" title="apply"></a>apply</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.myApply = <span class="function"><span class="keyword">function</span>(<span class="params">context,args</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 如果是调用自己，则返回undefined</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>===<span class="built_in">Function</span>.prototype) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    </span><br><span class="line">    context=context || <span class="built_in">window</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> fn = <span class="built_in">Symbol</span>(),</span><br><span class="line">    result;</span><br><span class="line">    </span><br><span class="line">    context[fn]=<span class="keyword">this</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">Array</span>.isarray(args))&#123;</span><br><span class="line">        result = context[fn](...args);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        result = context[fn]();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">delete</span> context[fn];</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><p>1.如果是调用自己，则返回undefined<br>2.判断<code>context</code>是否存在，不存在则调用window<br>3.新增一个<code>Symbol</code>属性，赋值给<code>context</code><br>4.将当前函数赋值给这个属性<br>5.判断传参是否数组<br>6.如果是，则将其余的参数传入执行方法。如果否，则直接调用方法。<br>7.删除方法，返回。</p><h3 id="call"><a href="#call" class="headerlink" title="call"></a>call</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.myCall= <span class="function"><span class="keyword">function</span>(<span class="params">context=window,...args</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span> === <span class="built_in">Function</span>.prototype) <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">    </span><br><span class="line">    context= context || <span class="built_in">window</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> fn = <span class="built_in">Symbol</span>(),</span><br><span class="line">    result;</span><br><span class="line">    </span><br><span class="line">    context[fn] = <span class="keyword">this</span>;</span><br><span class="line">    </span><br><span class="line">    result = context[fn](...args)</span><br><span class="line">    <span class="keyword">delete</span> context[fn]</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>1.如果是调用自己，则返回undefined<br>2.判断<code>context</code>是否存在，不存在则调用window<br>3.新增一个<code>Symbol</code>属性，赋值给<code>context</code><br>4.将当前函数赋值给这个属性<br>5.将其余的参数传入执行方法<br>6.删除方法，返回。</p><h3 id="bind"><a href="#bind" class="headerlink" title="bind"></a>bind</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.myBind = <span class="function"><span class="keyword">function</span>(<span class="params">context=window,...args</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span> === <span class="built_in">Function</span>.prototype) <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">const</span> _this = <span class="keyword">this</span> ;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">F</span>(<span class="params">...args2</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span> <span class="keyword">instanceof</span> F)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> _this(...args,...args2)</span><br><span class="line">        &#125;</span><br><span class="line">        _this.apply(context,args.concat(...args2))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>1.处理参数，返回一个闭包<br>2.判断是否为构造函数调用，如果是则调用<code>new</code>调用当前函数<br>3.如果不是，则用<code>apply</code>，将<code>context</code>和<code>args</code>参数传入</p><p><a href="http://www.conardli.top/docs/JavaScript/%E6%89%8B%E5%8A%A8%E5%AE%9E%E7%8E%B0call%E3%80%81apply%E3%80%81bind.html#%E6%A8%A1%E6%8B%9F%E5%AE%9E%E7%8E%B0apply" target="_blank" rel="noopener">参考</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Promise构造函数和then方法的执行顺序</title>
      <link href="/2019/08/14/2019-08-14-Promise%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E5%92%8Cthen%E6%96%B9%E6%B3%95%E7%9A%84%E6%89%A7%E8%A1%8C%E9%A1%BA%E5%BA%8F/"/>
      <url>/2019/08/14/2019-08-14-Promise%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E5%92%8Cthen%E6%96%B9%E6%B3%95%E7%9A%84%E6%89%A7%E8%A1%8C%E9%A1%BA%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="Promise的基本用法"><a href="#Promise的基本用法" class="headerlink" title="Promise的基本用法"></a>Promise的基本用法</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line">      <span class="comment">// 如果执行失败，则调用reject()</span></span><br><span class="line">      <span class="comment">// reject('fail')</span></span><br><span class="line">      </span><br><span class="line">      <span class="built_in">console</span>.log(<span class="number">2</span>)</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 如果执行成功，则调用resolve()</span></span><br><span class="line">      resolve(<span class="string">'success'</span>)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果执行成功，则继续调用then方法</span></span><br><span class="line">    promise.then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// console.log(res)</span></span><br><span class="line">      <span class="built_in">console</span>.log(<span class="number">3</span>)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果执行失败，则用catach捕获失败</span></span><br><span class="line">    promise.catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(err)</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="number">4</span>)</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><a id="more"></a><p>在<code>Promise</code>的内部，执行顺序是同步的。其次等内部执行完成后，调用再选择调用<code>then</code>or<code>catch</code>方法。</p><p>所以这次输出的结果：</p><blockquote><p>1<br>2<br>3</p></blockquote><h2 id="then的执行顺序"><a href="#then的执行顺序" class="headerlink" title="then的执行顺序"></a>then的执行顺序</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">     <span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line">     <span class="comment">// 如果执行失败，则调用reject()</span></span><br><span class="line">     <span class="comment">// reject('fail')</span></span><br><span class="line">     <span class="built_in">console</span>.log(<span class="number">2</span>)</span><br><span class="line">     <span class="comment">// 如果执行成功，则调用resolve()</span></span><br><span class="line">     resolve(<span class="string">'success'</span>)</span><br><span class="line">   &#125;)</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 如果执行成功，则继续调用then方法</span></span><br><span class="line">   promise.then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">     <span class="built_in">console</span>.log(res)</span><br><span class="line">     <span class="built_in">console</span>.log(<span class="number">3</span>)</span><br><span class="line">   &#125;)</span><br><span class="line"></span><br><span class="line">   <span class="comment">// promise内部是同步的，但是then方法是异步的</span></span><br><span class="line">   <span class="built_in">console</span>.log(<span class="number">5</span>)</span><br></pre></td></tr></table></figure><p><code>then</code>方法执行是异步的，不用等到<code>then</code>的方法结果,会直接执行<code>console.log(5)</code></p><blockquote><p>1<br>2<br>5<br>3</p></blockquote><h3 id="我们可以根据上面的代码，丰富业务实际情况"><a href="#我们可以根据上面的代码，丰富业务实际情况" class="headerlink" title="我们可以根据上面的代码，丰富业务实际情况"></a>我们可以根据上面的代码，丰富业务实际情况</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`开始执行`</span>)</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 如果执行成功，则调用resolve()</span></span><br><span class="line">  resolve(<span class="string">'success'</span>)</span><br><span class="line">  </span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`执行中ing`</span>)</span><br><span class="line">&#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(res)</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'执行成功，继续执行下一步'</span>)</span><br><span class="line">  <span class="keyword">return</span> <span class="string">'第二then方法，开始'</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果执行成功，则继续调用then方法</span></span><br><span class="line">promise.then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(res)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// promise内部是同步的，但是then方法是异步的</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`我会在then方法前，先执行`</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 我们可以利用timeout方法在then方法执行完成后，进行执行</span></span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span>=&gt;</span><span class="built_in">console</span>.log(<span class="string">`then方法执行完成后，开始执行`</span>))</span><br></pre></td></tr></table></figure><h4 id="执行结果："><a href="#执行结果：" class="headerlink" title="执行结果："></a>执行结果：</h4><blockquote><p>1.开始执行<br>2.执行中ing<br>3.我会在then方法前，先执行<br>4.执行成功，继续执行下一步<br>5.第二then方法，开始<br>6.then方法执行完成后，开始执行</p></blockquote><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>其实比较好理解的方式是：每次当<code>promise</code>执行完成后，<code>then</code>是异步的，所以当执行<code>then</code>后，不会等它的结果，会直接执行下面的代码，但是<code>setTimeout</code>定时器本身会将执行内容调到<code>任务队列</code>尾部，所以会等<code>then</code>方法执行完成后才会调用定时器。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6-解构赋值-数组和对象</title>
      <link href="/2019/06/05/2020-06-05-ES6%E7%9A%84%E8%A7%A3%E6%9E%84%E8%B5%8B%E5%80%BC/"/>
      <url>/2019/06/05/2020-06-05-ES6%E7%9A%84%E8%A7%A3%E6%9E%84%E8%B5%8B%E5%80%BC/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是解构？"><a href="#什么是解构？" class="headerlink" title="什么是解构？"></a>什么是解构？</h2><p>按照一定的模式从数组或者对象中取值，对变量进行赋值的过程称为「解构」</p><p>在 ES5 中，为变量赋值只能直接指定值：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var a=1,b=2,c=3</span><br><span class="line">a; // 1</span><br><span class="line">b; // 2</span><br><span class="line">c; // 3</span><br></pre></td></tr></table></figure><p>但是在 ES6 中，我们可以被允许写成：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var [a,b,c]=[1,2,3];</span><br><span class="line">a; // 1</span><br><span class="line">b; // 2</span><br><span class="line">c; // 3</span><br></pre></td></tr></table></figure><a id="more"></a><p>ES6 中可以很明显看出来，我们可以在数组中取数据，按照位置的对应关系对变量赋值。</p><h3 id="默认值"><a href="#默认值" class="headerlink" title="[默认值]"></a>[默认值]</h3><blockquote><p>解构赋值允许使用默认值</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var [foo = true] = [];</span><br><span class="line">foo; // true</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[x,y = &apos;b&apos;] = [&apos;a&apos;]</span><br><span class="line">x; // &quot;a&quot;</span><br><span class="line">y; // &quot;b&quot;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[x,y = &apos;b&apos;] = [&apos;a&apos;,&apos;c&apos;]</span><br><span class="line">x; // &quot;a&quot;</span><br><span class="line">y; // &quot;c&quot;</span><br></pre></td></tr></table></figure><p>ES6 内部使用的是严格相等运算符(===)判断一个位置是否有值。所以，如果一个数组成员不严格等于 undefind，默认值是不会生效的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var [x = 1] = [undefined];</span><br><span class="line">x; // 1</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">null == undefined // true</span><br><span class="line">var [x = 1] = [null];</span><br><span class="line">x; // null</span><br></pre></td></tr></table></figure><p>上述代码中，一个数组成员是 null,因此默认值不生效。因为 null 不严格等于 undefined。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">function f()&#123;</span><br><span class="line">    console,log(&apos;aaa&apos;);</span><br><span class="line">&#125;</span><br><span class="line">let [x = f()] = [1]; // undefined ,不执行 f()</span><br><span class="line">x; // 1</span><br></pre></td></tr></table></figure><h2 id="对象的解构赋值"><a href="#对象的解构赋值" class="headerlink" title="对象的解构赋值"></a>对象的解构赋值</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var &#123;foo,bar&#125;=&#123;foo:&quot;aaa&quot;,bar:&quot;bbb&quot;&#125;;</span><br><span class="line">foo; // &quot;aaa&quot;</span><br><span class="line">bar; // &quot;bbb&quot;</span><br></pre></td></tr></table></figure><p>对象的解构赋值和数组有一个不同，数组的元素是按次序排列的，变量的取值由它的位置决定；而对象的属性没有次序，变量必须与属性同名，才能取到正确的值。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var &#123;laf&#125; = &#123;foo:&quot;aaa&quot;,bar:&quot;bbb&quot;&#125;;</span><br><span class="line">laf; // undefined;</span><br></pre></td></tr></table></figure><p>在上面代码中，变量没有对应的同名属性，导致取不到值，最后等于 undefind。<br>实际上，对象的解构赋值是以下形式的简写。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var &#123; foo: foo, bar: bar &#125; = &#123; foo:&quot;aaa&quot;, bar:&quot;bbb&quot; &#125;</span><br></pre></td></tr></table></figure><p>实际上，在对象的解构赋值的内部机制，是先找到同名属性，然后在赋值给对应的变量。真正被赋值的是后者，而不是前者。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var &#123; foo : bar &#125; = &#123;foo : &quot;aaaa&quot;&#125;;</span><br><span class="line">foo; // foo is not defined</span><br><span class="line">bar; // &quot;aaaa&quot;</span><br></pre></td></tr></table></figure><p>采用这种写法是，变量的声明和赋值都是一体的。对于 let 和 const 而言，变量不能重新声明，所以一旦赋值的变量以前声明过，就会报错。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let foo;</span><br><span class="line">let &#123;foo&#125;=&#123;foo:&apos;1&apos;&#125;</span><br><span class="line">// Uncaught SyntaxError: Identifier &apos;foo&apos; has already been declared</span><br></pre></td></tr></table></figure><p>所以不能重复 let 声明：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">let foo;</span><br><span class="line">(&#123;foo&#125; = &#123;foo:1&#125;)</span><br></pre></td></tr></table></figure><p>对象的解构也可以制定默认值。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var &#123;x,y = 5&#125; = &#123;x:1&#125;;</span><br><span class="line">x; // 1</span><br><span class="line">y; // 5</span><br></pre></td></tr></table></figure><p>默认值生效条件是，对象属性严格不等于 undefined</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var &#123;x = 3&#125; = &#123;x: undefined&#125;;</span><br><span class="line">x; // 3</span><br><span class="line">var &#123;x = 3&#125; = &#123;x:null&#125;;</span><br><span class="line">x; // null</span><br></pre></td></tr></table></figure><p>和数组一样，解构也可以用于嵌套解构的对象。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var obj=&#123;</span><br><span class="line">    p:[</span><br><span class="line">        &quot;hello&quot;,</span><br><span class="line">        &#123;y:&quot;world&quot;&#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这时的 p 是模式，不是变量，因此不会被赋值。如果 p 也要作为变量赋值，应该写成这样：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">var obj = &#123;</span><br><span class="line">    p:&#123;</span><br><span class="line">        &quot;Hello&quot;,</span><br><span class="line">        &#123;</span><br><span class="line">            y:&quot;World&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">let &#123;p, p : &#123; x , [ &#123; y &#125; ] = obj;</span><br><span class="line"></span><br><span class="line">x // &quot;Hello&quot;</span><br><span class="line">y // &quot;World&quot;</span><br><span class="line">p // [&quot;Hello&quot;, &#123;y: &quot;World&quot;&#125;]</span><br></pre></td></tr></table></figure><p>下面一个例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var &#123;loc,loc:&#123;start&#125;,loc:&#123; start: &#123; &#123; line,column &#125; &#125; &#125;=&#123;</span><br><span class="line">    loc:&#123;</span><br><span class="line">        start:&#123;</span><br><span class="line">            line:1,</span><br><span class="line">            column:5</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>上面代码有三次解构赋值，分别是对 loc、start、line 三个属性的解构赋值。注意，最后一次对 line 属性的解构赋值之中，只有 line 是变量，loc 和 start 都是模式，不是变量。</p></blockquote><p><img src="http://ww2.sinaimg.cn/large/006tNc79gy1g3qcvneddpj30ik07pmxh.jpg" alt="赋值图示"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var obj = [];</span><br><span class="line">var arr = [];</span><br><span class="line"></span><br><span class="line">(&#123;foo:obj.prop,bar: arr[0]&#125; = &#123;foo:123,bar:true&#125;);</span><br><span class="line"></span><br><span class="line">obj; // &#123;prop:123&#125;</span><br><span class="line">arr; // [true]</span><br></pre></td></tr></table></figure><p>如果解构模式是嵌套的对象，而且子对象所在的父属性不存在，则会报错</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var &#123;foo : &#123;bar&#125;&#125; = &#123;baz:&apos;baz&apos;&#125;;</span><br></pre></td></tr></table></figure><p>正确的写法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var &#123;foo,foo:&#123;bar&#125;&#125;=&#123;foo:&#123;bar:&apos;bar&apos;&#125;&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue的生命周期</title>
      <link href="/2019/06/04/2019-06-04-Vue%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"/>
      <url>/2019/06/04/2019-06-04-Vue%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是生命周期？"><a href="#什么是生命周期？" class="headerlink" title="什么是生命周期？"></a>什么是生命周期？</h2><p>每个 Vue 实例在被创建时都经过了一系列的初始化过程</p><ul><li>设置数据监听</li><li>编译模板</li><li>将实例挂载到 DOM</li><li>数据变化时更新 DOM</li></ul><p>在这一系列过程中，也会运行一些「生命周期钩子」的函数，用在给开发者在不同阶段添加自己的代码的机会。</p><blockquote><p>「created」钩子，在一个实例被创建后执行代码</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">new Vue(&#123;</span><br><span class="line">  data: &#123;</span><br><span class="line">    a: 1</span><br><span class="line">  &#125;,</span><br><span class="line">  created: function () &#123;</span><br><span class="line">    // `this` 指向 vm 实例</span><br><span class="line">    console.log(&apos;a is: &apos; + this.a)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">// =&gt; &quot;a is: 1&quot;</span><br></pre></td></tr></table></figure><a id="more"></a><blockquote><p>不要在选项属性或回调上使用箭头函数，比如 created: () =&gt; console.log(this.a) 或 vm.$watch(‘a’, newValue =&gt; this.myMethod())。因为箭头函数并没有 this，this 会作为变量一直向上级词法作用域查找，直至找到为止，经常导致 Uncaught TypeError: Cannot read property of undefined 或 Uncaught TypeError: this.myMethod is not a function 之类的错误。</p></blockquote><p><img src="https://cn.vuejs.org/images/lifecycle.png" alt="流程图"></p><blockquote><p>参考 <a href="https://cn.vuejs.org/v2/guide/instance.html#生命周期图示" target="_blank" rel="noopener">Vue 实例</a></p></blockquote><p>通俗的讲：就是在.Vue 从加载前到销毁后，这一些系列过程中，有特定的阶段 fn 可以提供我们开发者来进行操作。</p><h2 id="阶段"><a href="#阶段" class="headerlink" title="阶段"></a>阶段</h2><table><thead><tr><th>钩子函数方法</th><th>触发阶段</th><th>操作</th></tr></thead><tbody><tr><td>beforeCreate</td><td>创建前</td><td>组件实例刚被创建，组件属性计算前，数据对象 data 都未定义，未初始化</td></tr><tr><td>created</td><td>创建后</td><td>组件实例创建完成，属性已经绑定，数据对象 data 已经定义存在，DOM 没为生成，$el 未存在</td></tr><tr><td>beforeMount</td><td>挂载前</td><td>Vue 实例的$el 和 data 都已经初始化完成，挂在前为虚拟的 dom 节点，模板还没有渲染到 HTML 页面上去，data.message 未替换。</td></tr><tr><td>mounted</td><td>挂载后</td><td>Vue 实例挂载完成，模板已经渲染到 HTML 中，dota.message 成功渲染。这个阶段可以做一些 ajax 请求操作，mounted 在周期中只会执行一次。</td></tr><tr><td>beforeUpdate</td><td>更新前</td><td>当 dota 更新之前，会触发 beforeUpdate 方法。</td></tr><tr><td>updated</td><td>更新后</td><td>当 data 更新完成后，触发 updated 方法。</td></tr><tr><td>beforeDestory</td><td>销毁前</td><td>Vue 组件实例销毁前执行的方法。</td></tr><tr><td>destroyed</td><td>销毁后</td><td>组件销毁后，调用的方法，对 data 的改变不会再触发函数周，vue 实例已经解除事件监听和 dom 绑定，但 dom 结构依然存在。</td></tr></tbody></table><p><img src="http://ww1.sinaimg.cn/large/006tNc79gy1g3p47s9i2qj30u01y0jwq.jpg" alt="图解"></p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">import Axios from &apos;axios&apos;       // 这是一个轻量级的ajax库，import是es6模块导入的语法。</span><br><span class="line">export default &#123;                // 这是一个vue的模块，后面讲奥。</span><br><span class="line">  name: &apos;app&apos;,</span><br><span class="line">  components: &#123;</span><br><span class="line">  &#125;,</span><br><span class="line">  data: function () &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      list: []</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted: function () &#123;          // 挂在完成后的生命周期钩子注册。</span><br><span class="line">    this.$nextTick(function () &#123;  // 等待下一次更新完成后执行业务处理代码。</span><br><span class="line">      Axios.get(&apos;/api/menulist&apos;, &#123;// 将回调延迟到下次 DOM 更新循环之后执行。在修改数据之后立即使用它，然后等待 DOM 更新</span><br><span class="line">        params: &#123;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;).then(function (res) &#123;</span><br><span class="line">        this.list = res.data</span><br><span class="line">      &#125;.bind(this))</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Vue-实例的全局配置"><a href="#Vue-实例的全局配置" class="headerlink" title="Vue 实例的全局配置"></a>Vue 实例的全局配置</h2><ul><li><p>silent</p><ul><li>类型：boolean</li><li>默认值：false</li><li>用法：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Vue.config.silent = true</span><br><span class="line">// 取消Vue所有的日志与警告</span><br></pre></td></tr></table></figure></li></ul></li><li><p>optionMergeStrategies</p><ul><li>类型： { [key: string]: Function }</li><li>默认值： {}</li><li>用法：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Vue.config.optionMergeStrategies._my_option=function( parent,child,vm)&#123;</span><br><span class="line">    return child+1</span><br><span class="line">&#125;</span><br><span class="line">const Profile = Vue.extend(&#123;</span><br><span class="line">    _my_option: 1</span><br><span class="line">&#125;)</span><br><span class="line">Profile.options._my_option = 2</span><br><span class="line">// 自定义合并策略选项</span><br><span class="line">// 合并策略选项分别接受第一个参数作为父实例，第二个参数为子实例，Vue实例上下文被作为第三个参数传入。</span><br></pre></td></tr></table></figure></li></ul></li><li><p>devtools</p><ul><li>类型：boolean</li><li>默认值：true</li><li>用法：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 务必在加载 Vue 之后，立即同步设置以下内容Vue.config.devtools = true</span><br><span class="line">// 配置是否允许 vue-devtools 检查代码。开发版本默认为 true，生产版本默认为 false。生产版本设为 true 可以启用检查。</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="Vue-的全局-API"><a href="#Vue-的全局-API" class="headerlink" title="Vue 的全局 API"></a>Vue 的全局 API</h2><ul><li>Vue.nextTick</li></ul><blockquote><p>语法：Vue.nextTick([callback, context])</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;Function&#125;[callback]</span><br><span class="line">&#123;Object&#125;[callback]</span><br></pre></td></tr></table></figure><p>用法：</p><p>在下次 DOM 更新循环结束后执行延迟回调。在修改数据之后立即使用这个方法，获取更新后的 DOM</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// 修改数据</span><br><span class="line">vm.msg = &apos;msg&apos;</span><br><span class="line">// DOM未更新</span><br><span class="line">Vue.nexTick(function() &#123;</span><br><span class="line">    // DOM更新了</span><br><span class="line">    // 执行操作</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>Vue.set</li></ul><blockquote><p>语法：Vue.set( object, key, value)</p></blockquote><p>参数:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;Object&#125; object</span><br><span class="line">&#123;String&#125; key</span><br><span class="line">&#123;any&#125; value</span><br></pre></td></tr></table></figure><p>用法：</p><p>设置对象数据。如果对象是响应式的，确保属性被创建后也是响应式的，同时触发视图更新，这个方法主要用于避开 Vue 不能检测属性被添加的限制。注意对象不能使 Vue 示例，或者 Vue 实例的根数据对象。</p><ul><li>Vue.complie</li></ul><blockquote><p>语法：Vue.compile(template)</p></blockquote><p>参数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;string&#125; template</span><br></pre></td></tr></table></figure><p>用法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// 在render函数中编译模板字符串</span><br><span class="line">// 在独立构建时有效</span><br><span class="line">var res = Vue.Compile(`&lt;div&gt;&lt;span&gt;&#123;&#123; msg &#125;&#125;&lt;/span&gt;&lt;/div&gt;`)</span><br><span class="line"></span><br><span class="line">new Vuew(&#123;</span><br><span class="line">    data:&#123;</span><br><span class="line">        msg:&apos;hello&apos;</span><br><span class="line">    &#125;,</span><br><span class="line">    render:res.render,</span><br><span class="line">    staticRenderFns:res.staticRenderFns</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>更多的 API 和用法请看-&gt; <a href="https://cn.vuejs.org/v2/api/" target="_blank" rel="noopener">API-Vue</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Express.js之路-基础</title>
      <link href="/2019/06/03/2019-06-03-Express.js%E4%B9%8B%E8%B7%AF-%E5%9F%BA%E7%A1%80/"/>
      <url>/2019/06/03/2019-06-03-Express.js%E4%B9%8B%E8%B7%AF-%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<ul><li>content<br>{:toc}</li></ul><h2 id="什么是-Express-js？"><a href="#什么是-Express-js？" class="headerlink" title="什么是 Express.js？"></a>什么是 Express.js？</h2><p>它是一个基于 Node.js 平台，快速、开放、极简的 web 开发框架。<br>在 Express 中就是一个重点：API。这让我们更加注重业务的功能和开发效率。</p><h2 id="如何使用-Express-js"><a href="#如何使用-Express-js" class="headerlink" title="如何使用 Express.js"></a>如何使用 Express.js</h2><h3 id="1-安装"><a href="#1-安装" class="headerlink" title="1.安装"></a>1.安装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd myproejct</span><br><span class="line">npm install express --save</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="2-在项目中引入："><a href="#2-在项目中引入：" class="headerlink" title="2.在项目中引入："></a>2.在项目中引入：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">const express = require(&apos;express&apos;)</span><br><span class="line">//  获取sever示例</span><br><span class="line"></span><br><span class="line">const app = express();</span><br><span class="line"></span><br><span class="line">// 绑定服务器接收请求，并添加处理回调参数</span><br><span class="line">app.get(&apos;/&apos;,(req,res) =&gt; &#123;</span><br><span class="line">    // 成功接收后，发起回调参数。</span><br><span class="line">    res.send(&apos;Hello World&apos;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="3-项目运行"><a href="#3-项目运行" class="headerlink" title="3.项目运行"></a>3.项目运行</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node server.js</span><br></pre></td></tr></table></figure><p><img src="http://ww3.sinaimg.cn/large/006tNc79gy1g3npum8z2qj31hc0r776f.jpg" alt="image"></p><blockquote><p>我们利用 Express 框架可以减少我们的代码量，比起之前使用的 node 核心模块 http 构建服务器代码排版更直观。Express 底层使用的是 htp 核心模块的 API。如果要处理客户端不同请求路径，我们可以往下罗列多个 ==app.get()== 方法，无需使用 ==if…else…==来判断。Express 也不用我们设置响应头的 Content-Type 和中文编码格式，会底层自动识别添加</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">app.get(&apos;/&apos;, (req, res) =&gt; &#123;</span><br><span class="line">  res.send(&apos;Hello World&apos;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.get(&apos;/json&apos;, (req, res) =&gt; &#123;</span><br><span class="line">    res.send(&#123;</span><br><span class="line">        app:&apos;你好&apos;,</span><br><span class="line">        name:&apos;China&apos;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="Express-中的静态服务"><a href="#Express-中的静态服务" class="headerlink" title="Express 中的静态服务"></a>Express 中的静态服务</h2><h3 id="什么是静态服务？"><a href="#什么是静态服务？" class="headerlink" title="什么是静态服务？"></a>什么是静态服务？</h3><p>在一些网站后端中，我们有一些静态文件暴露出来，用户可以根据 url 地址进去访问到其中的内容，这些静态文件也往往称之为公共资源，所以我们需要利用 Expree 框架来托管静态资源</p><h3 id="如何使用-Express-托管静态文件？"><a href="#如何使用-Express-托管静态文件？" class="headerlink" title="如何使用 Express 托管静态文件？"></a>如何使用 Express 托管静态文件？</h3><p>请使用 Express 中的 express.static 内置中间件函数<br>此函数特征：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">express.static(root,[options])</span><br></pre></td></tr></table></figure><p>通过下列代码就可以将 public 目录下的图片，css 文件，JavaScript 文件对外开放访问了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.use(&apos;/static/&apos;,express.static(&apos;public&apos;));</span><br></pre></td></tr></table></figure><p>于是在制定用户必须以/static/开头的 url 地址才能访问到静态文件夹「public」下的文件。</p><p><img src="http://ww1.sinaimg.cn/large/006tNc79gy1g3nqmzen49j306l05n0sl.jpg" alt="静态文件夹"></p><p><img src="http://ww2.sinaimg.cn/large/006tNc79gy1g3nqmgplvuj30fo06v0sr.jpg" alt="指定的静态访问地址"></p><h4 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h4><ul><li>你可以部署多个静态文件目录，请多次调用该中间件函数</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">app.use(express.static(&apos;public&apos;))</span><br><span class="line">app.use(express.static(&apos;files&apos;))</span><br></pre></td></tr></table></figure><ul><li>你可以不写一个参数，直接暴露根目录文件夹下静态文件<br>，用户根据指定的文件地址来访问对应资源。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.use(express.static(&apos;public&apos;))</span><br></pre></td></tr></table></figure><p><img src="http://ww4.sinaimg.cn/large/006tNc79gy1g3nqs0of8oj30ri0fa3yu.jpg" alt="image"></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2019-05-29-VUE中的$ref、$on、$emit</title>
      <link href="/2019/05/29/2019-05-29-VUE%E4%B8%AD%E7%9A%84ref%E3%80%81on%E3%80%81emit/"/>
      <url>/2019/05/29/2019-05-29-VUE%E4%B8%AD%E7%9A%84ref%E3%80%81on%E3%80%81emit/</url>
      
        <content type="html"><![CDATA[<h2 id="emit-eventNanme-…args"><a href="#emit-eventNanme-…args" class="headerlink" title="$emit(eventNanme,[…args])"></a>$emit(eventNanme,[…args])</h2><ul><li>参数：<ul><li>{string} eventName 触发事件名字</li><li>[…args] 附加的参数</li></ul></li><li>用法：<ul><li>触发当前实例上的事件。附加参数都会传给监听器回调。</li></ul></li><li>使用场景<ul><li>子组件调用父组件的方法并且传递数据</li></ul></li></ul><blockquote><p>注意：子组件标签中的时间也不区分大小写要用“-”隔开</p></blockquote><a id="more"></a><p>子组件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;button @click=&quot;emitEvent&quot;&gt;点击我&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        msg: &quot;我是子组件中的数据&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      emitEvent()&#123;</span><br><span class="line">        this.$emit(&apos;my-event&apos;, this.msg)</span><br><span class="line">        //通过按钮的点击事件触发方法，然后用$emit触发一个my-event的自定义方法，传递this.msg数据。</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>父组件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;child-a @my-event=&quot;getMyEvent&quot;&gt;&lt;/child-a&gt;</span><br><span class="line">    &lt;!--父组件中通过监测my-event事件执行一个方法，然后取到子组件中传递过来的值--&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  import ChildA from &apos;./components/child.vue&apos;</span><br><span class="line">  export default &#123;</span><br><span class="line">    components: &#123;</span><br><span class="line">      ChildA</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      getMyEvent(msg)&#123;</span><br><span class="line">          console.log(&apos;接收的数据---------&gt;&apos;+msg)//接收的数据---------&gt;我是子组件中的数据</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li>交互过程：<ul><li>child.vue 为子组件，当在 child.vue，点击 button。</li><li>触发子组件的「emitEvent」方法</li><li>在 emitEvent 方法中执行「this.$emit)(‘my-event’,this.msg)」,调用父组件的「my-event」的方法</li><li>执行「getMyEvent」方法</li></ul></li></ul><p>实际上就是在子组件上操作，但是作用在父组件上。</p><h2 id="ref"><a href="#ref" class="headerlink" title="ref"></a>ref</h2><blockquote><p>被用来给元素或者子组件注册引用信息。引用信息将会被注册在父组件的$refs 对象上。如果在普通的 DOM 元素上使用，引用指向的就是 DOM 元素；如果用在子组件上，引用就是指向组件实例：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- `vm.$refs.p` will be the DOM node --&gt;</span><br><span class="line">&lt;!-- `vm.$refs.p` 指向这个DOM --&gt;</span><br><span class="line">&lt;p ref=&quot;p&quot;&gt;hello&lt;/p&gt;</span><br><span class="line">&lt;!-- `vm.$refs.child` will be the child component instance --&gt;</span><br><span class="line">&lt;!-- `vm.$refs.child` 指向这个子组件 --&gt;</span><br><span class="line">&lt;child-com ref=&quot;chil&quot;&lt;/child-com&gt;</span><br></pre></td></tr></table></figure><p>ref 本身是作为渲染结果被创建的，在初始化渲染的时候你不能访问他们，因为他们还不存在，$refs 也不是响应式的，因此你不应该试图用它在模板中做数据绑定。</p><h2 id="ref-1"><a href="#ref-1" class="headerlink" title="$ref"></a>$ref</h2><blockquote><p>但是我们可以使用$ref 在直接访问这个子组件。</p></blockquote><ul><li><h4 id="适用环境："><a href="#适用环境：" class="headerlink" title="适用环境："></a>适用环境：</h4><ul><li>父组件调用子组件的方法，可以传递数据。</li></ul></li></ul><p>父组件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;child-a ref=&quot;child&quot;&gt;&lt;/child-a&gt;</span><br><span class="line">    &lt;!--用ref给子组件起个名字--&gt;</span><br><span class="line">    &lt;button @click=&quot;getMyEvent&quot;&gt;点击父组件&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  import ChildA from &apos;./components/child.vue&apos;</span><br><span class="line">  export default &#123;</span><br><span class="line">    components: &#123;</span><br><span class="line">      ChildA</span><br><span class="line">    &#125;,</span><br><span class="line">    data() &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        msg: &quot;我是父组件中的数据&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      getMyEvent()&#123;</span><br><span class="line">          this.$refs.child.emitEvent(this.msg);</span><br><span class="line">          //调用子组件的方法，child是上边ref起的名字，emitEvent是子组件的方法。</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>子组件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;button&gt;点击我&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    methods: &#123;</span><br><span class="line">      emitEvent(msg)&#123;</span><br><span class="line">        console.log(&apos;接收的数据---------&gt;&apos;+msg)//接收的数据---------&gt;我是父组件中的数据</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li><h4 id="交互过程"><a href="#交互过程" class="headerlink" title="交互过程"></a>交互过程</h4><ul><li>绑定「child-a」组件，定义为「child」</li><li>触发父组件的「getMyEvent」</li><li>调用子组件的方法，child 是上边 ref 起的名字，emitEvent 是子组件的方法。</li><li>子组件中「emitEvent」方法触发。</li></ul></li></ul><h2 id="on-event-callback"><a href="#on-event-callback" class="headerlink" title="$on(event,callback)"></a>$on(event,callback)</h2><ul><li>参数：<ul><li>{string | Array<string>} event</string></li><li>{Funtion} callback</li></ul></li><li>用法：<ul><li>监听当前示例上的自定义事件。事件可以由 vm.$emit 触发。回调函数会接收所传入事件触发函数的额外参数</li></ul></li><li>适用环境：<ul><li>兄弟组件进行通信</li></ul></li></ul><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><ul><li><p>首先创建一个 vue 的空白实例（兄弟间的桥梁）</p></li><li><p>父组件</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">     &lt;div&gt;</span><br><span class="line">      &lt;childa&gt;&lt;/childa&gt;</span><br><span class="line">      &lt;br /&gt;</span><br><span class="line">      &lt;childb&gt;&lt;/childb&gt;</span><br><span class="line">     &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">   import childa from &apos;./childa.vue&apos;;</span><br><span class="line">   import childb from &apos;./childb.vue&apos;;</span><br><span class="line">   export default &#123;</span><br><span class="line">   components:&#123;</span><br><span class="line">   childa,</span><br><span class="line">   childb</span><br><span class="line">   &#125;,</span><br><span class="line">   data()&#123;</span><br><span class="line">   return &#123;</span><br><span class="line">   msg:&quot;&quot;</span><br><span class="line">   &#125;</span><br><span class="line">   &#125;,</span><br><span class="line">   methods:&#123;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li>子组件 A childa</li></ul><p>发送方使用 ==$emit== 自定义时间把数据带过去</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;span&gt;A组件-&gt;&#123;&#123;msg&#125;&#125;&lt;/span&gt;</span><br><span class="line">        &lt;input type=&quot;button&quot; value=&quot;把a组件数据传给b&quot; @click =&quot;send&quot;&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">// 空的组件(兄弟的桥梁)</span><br><span class="line">import vmson from &quot;../../../util/emptyVue&quot;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">    data()&#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            msg:&#123;</span><br><span class="line">            a:&apos;111&apos;,</span><br><span class="line">            b:&apos;222&apos;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods:&#123;</span><br><span class="line">        send:function()&#123;</span><br><span class="line">            vmson.$emit(&quot;aevent&quot;,this.msg)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li>子组件 childb</li></ul><p>而接收方通过 ==$on==监听自定义时间的 callback 接收数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line"> &lt;div&gt;</span><br><span class="line">    &lt;span&gt;b组件,a传的的数据为-&gt;&#123;&#123;msg&#125;&#125;&lt;/span&gt;</span><br><span class="line"> &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  import vmson from &quot;../../../util/emptyVue&quot;</span><br><span class="line">  export default &#123;</span><br><span class="line"> data()&#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            msg:&quot;&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"> mounted()&#123;</span><br><span class="line">        vmson.$on(&quot;aevent&quot;,(val)=&gt;&#123;</span><br><span class="line">            //监听事件aevent，回调函数要使用箭头函数;</span><br><span class="line">            console.log(val);//打印结果：我是a组件的数据</span><br><span class="line">            this.msg = val;</span><br><span class="line">        &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="交互过程："><a href="#交互过程：" class="headerlink" title="交互过程："></a>交互过程：</h4><ul><li>定义一个父组件，作为 A/B 子组件的通信桥梁</li><li>在 A 组件来中设定一个自定义事件「aevent」</li><li>在 B 组件中，通过父组件「vmson」进行监听「aevent」事件的触发，进行回调</li></ul><p>当然还有其他 API</p><p><img src="https://ws3.sinaimg.cn/large/006tNc79gy1g3j3ej34uaj30jm0jlaah.jpg" alt="image"></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2019-03-07-JavaScript的函数式编程(1)</title>
      <link href="/2019/03/07/2019-03-07-JavaScript%E7%9A%84%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B(1)/"/>
      <url>/2019/03/07/2019-03-07-JavaScript%E7%9A%84%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B(1)/</url>
      
        <content type="html"><![CDATA[<h2 id="函数式编程-Funtional-programming"><a href="#函数式编程-Funtional-programming" class="headerlink" title="函数式编程 Funtional programming"></a>函数式编程 Funtional programming</h2><p>函数式编程是一种编程范式，也就和如何写程序的方法论，属于结构化编程的一中，主要思想是把运算过程尽量写成一系列嵌套的函数调用</p><p><strong>学习函数式编程需要了解什么？</strong></p><ul><li>了解什么时候范畴论</li><li>数学模型和范畴之间的关系</li><li>范畴与函数式编程的关系</li></ul><h2 id="什么是范畴论？"><a href="#什么是范畴论？" class="headerlink" title="什么是范畴论？"></a>什么是范畴论？</h2><p>函数式编程的起源，是一门叫范畴论（Caregory Theory）的数学分支</p><a id="more"></a><p>理解函数式编程的关键，就是理解范畴论。它是一门复杂的数学，认为世界上的所有的概念体系，都可以抽象成一个的‘范畴’</p><p><strong>范畴就是使用箭头连接的物体</strong></p><p>通俗的讲，就是彼此之间存在某种关系的概念、事务、对象等等，都构成范畴。</p><p><img src="https://ws1.sinaimg.cn/large/006tKfTcgy1g0ujbfe6jej30hq0dbjrg.jpg" alt="image"></p><p>箭头表示范畴成员之间的关系，正式名称叫做“态射”（morphism）。范畴论任务，同一个范畴的所有成员，就是不同状态的“形变”。通过“态射”就可以从一个成员形变成另一个成员。</p><h3 id="数学模型"><a href="#数学模型" class="headerlink" title="数学模型"></a>数学模型</h3><p>既然“范畴“是满足某种形变关系的所有对象，就可以总结出来它的数学模型。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1.所有成员是一种集合</span><br><span class="line">2.形变关系是函数</span><br></pre></td></tr></table></figure><p>也就是说，范畴论是集合论更上层的抽象，简单的理解就是“集合+函数”</p><p>理论上通过函数，就可以从范畴的一个成员，算出其他所有成员</p><h3 id="范畴与容器"><a href="#范畴与容器" class="headerlink" title="范畴与容器"></a>范畴与容器</h3><p>如果把“范畴”想象成一个容器，里面包含两样东西。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">值（value）</span><br><span class="line">值得变形关系，（函数）</span><br></pre></td></tr></table></figure><p>下面我们来定义一个简单的范畴</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">class Category &#123;</span><br><span class="line">    // 实例化时，传过来的参数</span><br><span class="line">    constructor(a, b, c) &#123;</span><br><span class="line">        this.val = a + b + c;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    addOn(x) &#123;</span><br><span class="line">        return x + 1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var a = new Category(12, 3, 4);</span><br><span class="line"></span><br><span class="line">console.log(a); // Category &#123;val: 19&#125;</span><br></pre></td></tr></table></figure><p>上面代码中，Category 是一个类，也是一个容器，里面包含了一个值(this.val)和一种变形关系(addOne)。该关系就是彼此之间都相差 1 的数字。</p><h3 id="范畴论和函数式编程的关系"><a href="#范畴论和函数式编程的关系" class="headerlink" title="范畴论和函数式编程的关系"></a>范畴论和函数式编程的关系</h3><blockquote><p>范畴论使用函数，表达范畴之间的关系</p></blockquote><p>伴随着范畴论的发展，就发展除了一整套函数的运算方法。方法起初只是适用于数学算法，后来有人将它在计算机上实现了，成为了今天的“函数式编程”。</p><p><strong>本质上，函数式编程只是范畴论的预算方法，跟数学逻辑、微积分、行列式都是一类东西，都是数学方法，只是正好用它来写程序。</strong></p><h2 id="函数的合成与柯里化"><a href="#函数的合成与柯里化" class="headerlink" title="函数的合成与柯里化"></a>函数的合成与柯里化</h2><p>函数式编程有 2 个最基本的运算</p><ul><li>合成</li><li>柯里化</li></ul><h3 id="合成"><a href="#合成" class="headerlink" title="合成"></a>合成</h3><p>如果一个值要经过多个函数，才能变成另外一个值，就可以把所有的中间步骤合并成一个函数，叫做“函数的合成”</p><p><img src="https://ws1.sinaimg.cn/large/006tKfTcgy1g0ujbv9nszj309608swec.jpg" alt="image"></p><p>上图中，X 和 Y 之间的变形关系是函数 f，Y 和 Z 的变形关系是 g，那么 X 和 Z 之间的关系，就是 g 和 f 的合成函数 g·f。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">const compose = function (f, g) &#123;</span><br><span class="line">    return function (x) &#123;</span><br><span class="line">        return f(g(y));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://ws4.sinaimg.cn/large/006tKfTcgy1g0ujc6qw2fj30m808pdfz.jpg" alt="image"></p><p>函数的合成还必须要满足结合律</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">compose(f,compse(g.h));</span><br><span class="line">// 等同于</span><br><span class="line">compose(compose(f,g),h);</span><br><span class="line">// 等同于</span><br><span class="line">compose(f,g,h);</span><br></pre></td></tr></table></figure><h3 id="柯里化"><a href="#柯里化" class="headerlink" title="柯里化"></a>柯里化</h3><p>f(x)和 g(x)合成为 f(g(x)),有一个隐藏的前提，就是 f 和 g 都只能接受一个参数。如果接受多个参数，比如 f(x,y)和 g(a,b,c)，函数合成就很麻烦。<br>所以需要函数柯里化，把一个多参数的函数，转化为一个单参数的函数；</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&quot;use strict&quot;;</span><br><span class="line"></span><br><span class="line">// 未柯里化</span><br><span class="line">function add(x, y) &#123;</span><br><span class="line">    return alert(x + y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 柯里化后</span><br><span class="line">function Xadd(x) &#123;</span><br><span class="line">    return function (y) &#123;</span><br><span class="line">        return alert(x + y);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Xadd(2)(3);// 5</span><br></pre></td></tr></table></figure><p>有了柯里化以后，我们就能做到，所以函数只能接受一个参数。</p><blockquote><p>这里面包含了 ES6 的 class、constructor 等特性</p></blockquote><h3 id="JavaScript-的-class"><a href="#JavaScript-的-class" class="headerlink" title="JavaScript 的 class"></a>JavaScript 的 class</h3><p>在 ES5 的时候，我们编写 JavaScript 很多时候只能使用构造函数和原型链进行方法属性，实现 class 的功能</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">// ES5环境</span><br><span class="line">&apos;use strict&apos;;</span><br><span class="line">// Box是一个构造函数</span><br><span class="line">function Box(val) &#123;</span><br><span class="line">    this.type = &apos;double&apos;;</span><br><span class="line">    this.color = val;</span><br><span class="line">&#125;</span><br><span class="line">// 我们通过prototype的方式来添加一条属性</span><br><span class="line">Box.prototype.hello = function () &#123;</span><br><span class="line">    console.log(&apos;hello,&apos; + this.type + &quot;,&quot; + this.color);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 对于私有属性（static method），  我们当然不能放在原型链上，我们直接放在构造函数上面。</span><br><span class="line">Box.fn = function () &#123;</span><br><span class="line">    console.log(&apos;static&apos;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//通过new来创建</span><br><span class="line">var circle = new Box(&apos;red&apos;);</span><br><span class="line">circle.hello(); // hello,double,red</span><br></pre></td></tr></table></figure><p>但是在 ES6 的规范中，可以使用 class 语法，ES6 的 class 可以看做只是一个语法糖，它绝大部分都可以做到，新的 class 写法只是让对象原型的写法更加清晰、更想面对对象编程的语法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">// es6</span><br><span class="line">class BoxES6 &#123;</span><br><span class="line">    constructor(val) &#123;</span><br><span class="line">        this.type = &apos;double&apos;;</span><br><span class="line">        this.color = val;</span><br><span class="line">    &#125;</span><br><span class="line">    hello() &#123;</span><br><span class="line">        console.log(&apos;hello,&apos; + this.type + &apos;,&apos; + this.color);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//通过new来创建</span><br><span class="line">var helloBlue = new BoxES6(&apos;blue&apos;);</span><br><span class="line"></span><br><span class="line">helloBlue.hello(); // hello,double,blue</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2019-03-07-JavaScript的函数式编程(2)</title>
      <link href="/2019/03/07/2019-03-11-JavaScript%E7%9A%84%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B(2)/"/>
      <url>/2019/03/07/2019-03-11-JavaScript%E7%9A%84%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B(2)/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文中的知识点，我也不是很懂，比较难理解。</p></blockquote><h2 id="涵子"><a href="#涵子" class="headerlink" title="涵子"></a>涵子</h2><h3 id="什么是涵子"><a href="#什么是涵子" class="headerlink" title="什么是涵子"></a>什么是涵子</h3><p>涵子是函数式编程里面最重要的数据类型，也是最基本的运算单位和功能单位。</p><p>它是一种范畴（也是一种容器），包含了值和变形关系。比较特殊的是，它的变形关系可以依次作用于每一个值，<strong>将当前容器变形为另一个容器</strong>。</p><p><img src="https://ws2.sinaimg.cn/large/006tKfTcgy1g0yw1xe4azj30of081q34.jpg" alt="image"></p><p>上图中，左侧的圆圈就是一个汉字，表示人名的范畴。外部传入函数 f，会转成右边标示早餐的范畴。</p><a id="more"></a><h3 id="涵子的代码实现"><a href="#涵子的代码实现" class="headerlink" title="涵子的代码实现"></a>涵子的代码实现</h3><p>任何具有 map 方法的素具结构，都可以当做涵子的实现。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">class Functor&#123;</span><br><span class="line">    constructor(val)&#123;</span><br><span class="line">        this.val=val;</span><br><span class="line">    &#125;</span><br><span class="line">    map(f)&#123;</span><br><span class="line">        return new Functor(f(this.val));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上述代码中，FUnctor 是一个涵子，它的 map 方法接受函数 f 作为参数，最后返回一个新的涵子，里面包含的值是被 f 处理过的(f(this.val));</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">(new Functor(2)).map(function (a) &#123;</span><br><span class="line">    // 由函数式表面，这是Funtor的return返回执行f(this.val)</span><br><span class="line">    return a + 5; // 7</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">(new Functor(&quot;mynameisKisn&quot;)).map(function (a) &#123;</span><br><span class="line">    return a.toUpperCase(); //MYNAMEISKISN</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">var res = (new Functor(&apos;bombs&apos;)).map(function (a) &#123;</span><br><span class="line">    return a.concat(&apos; away&apos;);</span><br><span class="line">&#125;).map(function (a) &#123;</span><br><span class="line">    console.log(a); // bombs away</span><br><span class="line">    return a.length;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">console.log(res); // Functor(10),this.val = 10;</span><br></pre></td></tr></table></figure><p>上面的栗子说明，函数式编程里面的运算，都是通过了涵子完成，即运算不直接针对值，而是针对这个值的容器-涵子，涵子本身具有对外接口（map 方法），各种函数就是运算符，通过接口接入容器， 引发容器值的变形。</p><blockquote><p>其实后面还有一些别的涵子介绍，但是我就不对这个方面继续整理了，整体对能力、数据分析、逻辑要求都比较高，我比较菜就不深入学习，主要为了了解基础原理以及基础逻辑即可，后期等我学习完 VUE，我会继续深入学习。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2019-03-06-闭包(Closurce)</title>
      <link href="/2019/03/06/2019-03-06-%E9%97%AD%E5%8C%85(Closurce)/"/>
      <url>/2019/03/06/2019-03-06-%E9%97%AD%E5%8C%85(Closurce)/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是闭包？"><a href="#什么是闭包？" class="headerlink" title="什么是闭包？"></a>什么是闭包？</h2><p>闭包就是能够读取其他函数内部变脸的函数。在 JavaScript 中，只有函数内部的子函数才能读取局部变量，所以闭包可以理解成「定义在一个函数内部的函数」。本质，闭包是将函数内部和函数外部连接起来的桥梁。</p><h3 id="变量的作用域"><a href="#变量的作用域" class="headerlink" title="变量的作用域"></a>变量的作用域</h3><p>要了解闭包，首先必须了解 JavaScript 特殊的变量作用域。</p><ul><li>全局变量</li><li>局部变量</li></ul><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var a = 12345； // 全局变量</span><br><span class="line"></span><br><span class="line">function f1()&#123;</span><br><span class="line">    alert(a);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">f1(); //12345</span><br></pre></td></tr></table></figure><p>但是在函数外部自然不能读取函数内部的变量。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">function f1()&#123;</span><br><span class="line">    var a = 12345;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">alert(a); // error</span><br></pre></td></tr></table></figure><blockquote><p>在函数内部声明变量的时候，一定要使用 var，如果不使用，实际上你生命了一个全局变量</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">function f1()&#123;</span><br><span class="line">    a = 12345;</span><br><span class="line">&#125;</span><br><span class="line">f1();</span><br><span class="line">alert(n); // 12345</span><br></pre></td></tr></table></figure><h2 id="如何从外部读取局部变脸？"><a href="#如何从外部读取局部变脸？" class="headerlink" title="如何从外部读取局部变脸？"></a>如何从外部读取局部变脸？</h2><h3 id="在函数内部，在定义一个函数"><a href="#在函数内部，在定义一个函数" class="headerlink" title="在函数内部，在定义一个函数"></a>在函数内部，在定义一个函数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">function f1()&#123;</span><br><span class="line">    var n = 999;</span><br><span class="line">    function f2()&#123;</span><br><span class="line">        alert(n); // 999</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在代码中，函数 f2 就被包含在函数 f1 内部，这是 f1 内部的所有全局变量，对 f2 都是可见的。但是反过来不行，f2 内部的局部变量，对 f1 是不可见的。只能子对象一级以及网上寻找所有父对象的变量。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">function f1()&#123;</span><br><span class="line">    var n=999;</span><br><span class="line">    function f2()&#123;</span><br><span class="line">        alert(n);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return f2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var res = f1();</span><br><span class="line"></span><br><span class="line">res(); // 999</span><br></pre></td></tr></table></figure><p>如上面的代码所示，f2 函数就是闭包。</p><h2 id="闭包的用途"><a href="#闭包的用途" class="headerlink" title="闭包的用途"></a>闭包的用途</h2><p>闭包主要的在</p><ul><li>可以读取函数内部的变量</li><li>让这些变脸的值始终保持在内存中</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">function f1()&#123;</span><br><span class="line">    var n = 999;</span><br><span class="line"></span><br><span class="line">    nAdd = function()&#123;</span><br><span class="line">        n += 1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function f2()&#123;</span><br><span class="line">        alert(n);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return f2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var res = f1();</span><br><span class="line"></span><br><span class="line">res(); // 999</span><br><span class="line"></span><br><span class="line">nAdd();</span><br><span class="line"></span><br><span class="line">res(); // 1000</span><br></pre></td></tr></table></figure><p>在上述代码中，res 实际上就是闭包 f2 函数。他一共运行了 2 次，第一次的值是 999，第二次的值是 1000。这证明了，函数 f1 中的局部变量 n 一直保持在内存中，并没有在 f1 调用后被自动清除。</p><p>f1 是 f2 的富含，而 f2 被赋予了一个全局变脸，这导致 f2 永远存在内存中，而 f2 的存在依赖于 f1，因此 f1 也必须始终存在于内存中，不会在调用结束后，被垃圾回收机制回收。</p><p><strong>值得注意</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">nAdd = function()&#123;</span><br><span class="line">    n += 1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先，在 nAdd 前面没有加<strong>var</strong>,因此 nAdd 是一个全局变量，而不是局部棉量，其次 nAdd 的值是一个匿名函数，而这个匿名函数本身也是个闭包，所以 nAdd 相当于是一个 setter，可以在函数外部对内部的局部变量进行操作。</p><blockquote><p>注意！ 「onAdd」这种函数写法，在严格模式（’use strict’）下是会报错的。</p></blockquote><h2 id="使用闭包的注意点"><a href="#使用闭包的注意点" class="headerlink" title="使用闭包的注意点"></a>使用闭包的注意点</h2><ul><li>由于闭包会使得函数的变量都被保存在内存中，内存消耗是很严重的，所以不能滥用闭包，否则会造成网页的性能问题，在 IE 中会导致内存泄漏。解决方法是，在退出函数前，将不使用的局部变量全部删除</li><li>闭包会在函数外部，改变父函数的内部变量的值。所以，如果你把父函数当做对象使用，把闭包当做他的公用方法，把内部变量当做他的私有属性，必须注意，不能随便改变父函数内部变量的值。</li></ul><h4 id="好了写完了"><a href="#好了写完了" class="headerlink" title="好了写完了"></a>好了写完了</h4><h4 id="好了写完了-1"><a href="#好了写完了-1" class="headerlink" title="好了写完了"></a>好了写完了</h4><h4 id="好了写完了-2"><a href="#好了写完了-2" class="headerlink" title="好了写完了"></a>好了写完了</h4><h4 id="好了写完了-3"><a href="#好了写完了-3" class="headerlink" title="好了写完了"></a>好了写完了</h4><h4 id="好了写完了-4"><a href="#好了写完了-4" class="headerlink" title="好了写完了"></a>好了写完了</h4><h4 id="好了写完了-5"><a href="#好了写完了-5" class="headerlink" title="好了写完了"></a>好了写完了</h4><h4 id="好了写完了-6"><a href="#好了写完了-6" class="headerlink" title="好了写完了"></a>好了写完了</h4><h4 id="好了写完了-7"><a href="#好了写完了-7" class="headerlink" title="好了写完了"></a>好了写完了</h4><h4 id="好了写完了-8"><a href="#好了写完了-8" class="headerlink" title="好了写完了"></a>好了写完了</h4><h4 id="好了写完了-9"><a href="#好了写完了-9" class="headerlink" title="好了写完了"></a>好了写完了</h4><h4 id="好了写完了-10"><a href="#好了写完了-10" class="headerlink" title="好了写完了"></a>好了写完了</h4><h4 id="好了写完了-11"><a href="#好了写完了-11" class="headerlink" title="好了写完了"></a>好了写完了</h4><h4 id="好了写完了-12"><a href="#好了写完了-12" class="headerlink" title="好了写完了"></a>好了写完了</h4><h4 id="好了写完了-13"><a href="#好了写完了-13" class="headerlink" title="好了写完了"></a>好了写完了</h4><h4 id="好了写完了-14"><a href="#好了写完了-14" class="headerlink" title="好了写完了"></a>好了写完了</h4><h4 id="好了写完了-15"><a href="#好了写完了-15" class="headerlink" title="好了写完了"></a>好了写完了</h4><h4 id="好了写完了-16"><a href="#好了写完了-16" class="headerlink" title="好了写完了"></a>好了写完了</h4><h4 id="好了写完了-17"><a href="#好了写完了-17" class="headerlink" title="好了写完了"></a>好了写完了</h4><h4 id="好了写完了-18"><a href="#好了写完了-18" class="headerlink" title="好了写完了"></a>好了写完了</h4><h4 id="好了写完了-19"><a href="#好了写完了-19" class="headerlink" title="好了写完了"></a>好了写完了</h4><h4 id="好了写完了-20"><a href="#好了写完了-20" class="headerlink" title="好了写完了"></a>好了写完了</h4><h4 id="好了写完了-21"><a href="#好了写完了-21" class="headerlink" title="好了写完了"></a>好了写完了</h4><h4 id="好了写完了-22"><a href="#好了写完了-22" class="headerlink" title="好了写完了"></a>好了写完了</h4><h4 id="好了写完了-23"><a href="#好了写完了-23" class="headerlink" title="好了写完了"></a>好了写完了</h4><h4 id="好了写完了-24"><a href="#好了写完了-24" class="headerlink" title="好了写完了"></a>好了写完了</h4><h4 id="好了写完了-25"><a href="#好了写完了-25" class="headerlink" title="好了写完了"></a>好了写完了</h4><h4 id="好了写完了-26"><a href="#好了写完了-26" class="headerlink" title="好了写完了"></a>好了写完了</h4><h4 id="好了写完了-27"><a href="#好了写完了-27" class="headerlink" title="好了写完了"></a>好了写完了</h4><h4 id="好了写完了-28"><a href="#好了写完了-28" class="headerlink" title="好了写完了"></a>好了写完了</h4><h4 id="好了写完了-29"><a href="#好了写完了-29" class="headerlink" title="好了写完了"></a>好了写完了</h4><h4 id="好了写完了-30"><a href="#好了写完了-30" class="headerlink" title="好了写完了"></a>好了写完了</h4><h4 id="好了写完了-31"><a href="#好了写完了-31" class="headerlink" title="好了写完了"></a>好了写完了</h4><h4 id="好了写完了-32"><a href="#好了写完了-32" class="headerlink" title="好了写完了"></a>好了写完了</h4><h4 id="好了写完了-33"><a href="#好了写完了-33" class="headerlink" title="好了写完了"></a>好了写完了</h4><h4 id="好了写完了-34"><a href="#好了写完了-34" class="headerlink" title="好了写完了"></a>好了写完了</h4><h4 id="好了写完了-35"><a href="#好了写完了-35" class="headerlink" title="好了写完了"></a>好了写完了</h4><h4 id="好了写完了-36"><a href="#好了写完了-36" class="headerlink" title="好了写完了"></a>好了写完了</h4><h4 id="好了写完了-37"><a href="#好了写完了-37" class="headerlink" title="好了写完了"></a>好了写完了</h4><h4 id="好了写完了-38"><a href="#好了写完了-38" class="headerlink" title="好了写完了"></a>好了写完了</h4><h4 id="好了写完了-39"><a href="#好了写完了-39" class="headerlink" title="好了写完了"></a>好了写完了</h4><h4 id="好了写完了-40"><a href="#好了写完了-40" class="headerlink" title="好了写完了"></a>好了写完了</h4><h4 id="好了写完了-41"><a href="#好了写完了-41" class="headerlink" title="好了写完了"></a>好了写完了</h4><hr><p>再说点？</p><blockquote><p>今天整理完，感觉还有一些时间，分享下上周看的奥斯卡最佳影片「绿皮书」</p></blockquote><p>特别喜欢这句对白</p><p><strong>「如果我不够黑人，也不够白人，又或不够男人，那请你告诉我，托尼，那我到底算是什么人！？」</strong></p><p>从学校踏入社会，也有快三年时间了，接触的人也越来越多。在我三观里，对于男女平权、种族仇恨等等，都比较模糊，我只是一直觉得人不可能存在在中立阶段，更多可能是偏左、右，不管从自然选择、和平演变，我觉得大多数人类更多站在自己的利益面发表自己的言论。</p><p>在我看来，这部电影给我最大的思考就就是 Don Shirley 在雨中对 Tony 的歇斯底里的怒吼，为什么人活着就要偏向人群所希望亦或一致认知的生活状态。乃至已经到了 Don 这种高度学历、地位、教育的人依旧困在自己的思想桎梏。</p><p>我经常告诉自己「可能你改不了世界的现状，也改不了身边的朋友、亲人的环境，至少在自己认知方面觉得可以坚持的事，认真坚持到底。」乃至可能也不够「黑」、不够「白」。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2019-03-05-JS的回收机制</title>
      <link href="/2019/03/05/2019-03-05-JS%E7%9A%84%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6/"/>
      <url>/2019/03/05/2019-03-05-JS%E7%9A%84%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="回收机制"><a href="#回收机制" class="headerlink" title="回收机制"></a>回收机制</h2><blockquote><p>JS 为了防止内存泄露，会执行回收机制</p></blockquote><h3 id="什么是内存泄漏？"><a href="#什么是内存泄漏？" class="headerlink" title="什么是内存泄漏？"></a>什么是内存泄漏？</h3><p>当已经不需要某块内存时，内存却还存在。</p><p>所以，回收机制就是阶段性的不定期去寻找不再使用的变量，并释放他们所指向的内存</p><p>比如如何处理哪些已经执行完毕的函数，如果么有外部应用，则会回收。</p><p>常用的两种垃圾回收规则：</p><ul><li>标记清除</li><li>引用计数</li></ul><p>Javascript 引擎基础 GC 方案是（Simple GC）：</p><a id="more"></a><p><strong>mark and sweep</strong> —&gt; 标记清楚</p><ul><li>遍历所以可访问的对象</li><li>回收已不可访问的对象<br>比如：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">当变量进入环境时，例如，在函数中声明一个变量，就将它标记为「进入环境」</span><br><span class="line">从逻辑上来讲，永远不能释放进入环境的变量所占用的内存，因为只要执行流进入相应的环境，就可能会用他它们。</span><br><span class="line">而当变量离开环境的时候，则会标记「离开环境」</span><br><span class="line">垃圾回收机在运行的时候会给存储在内存中的所有边浪都加上标记</span><br><span class="line">然后，它会去掉环境中的变量以及被环境中的变量引用的变量的标记（闭包，也就是说在环境中的以及相关引用的变量会被去除标记）</span><br><span class="line">而在此之后再被加上标记的变量会将被视为准备删除的变量，原因是环境中的变量已经无法访问到这些变量了</span><br><span class="line">最后垃圾回收期完成内存清除工作，销毁哪些带标记的值，并回收他们所占用的内存空间</span><br></pre></td></tr></table></figure><p>简单的阐述：</p><p>跟踪记录每个值被引用的次数，当一个值被引用时，次数-1，减持时-1，下次垃圾回收器会收回次数为 0 的值的内存。</p><h3 id="GC-的缺陷"><a href="#GC-的缺陷" class="headerlink" title="GC 的缺陷"></a>GC 的缺陷</h3><p>出于安全考虑<strong>GC 时，停止响应其他操作</strong><br>但是它操作时候在<strong>100ms</strong>甚至以上</p><p>对于一般应用还可以，但是对于 js 游戏，动画对连贯性要求比较高的应用，需要另外处理。</p><h3 id="GC-的优化策略"><a href="#GC-的优化策略" class="headerlink" title="GC 的优化策略"></a>GC 的优化策略</h3><h4 id="分带回收（Generation-GC）"><a href="#分带回收（Generation-GC）" class="headerlink" title="分带回收（Generation GC）"></a>分带回收（Generation GC）</h4><p>目的是通过区分「临时」与「持久」对象:</p><ul><li>多回收「临时对象」区（young generation）</li><li>少回收「持久对象」区（tenured generation）</li><li>减少每次需遍历的对象，从而减少每次 GC 的耗时。</li></ul><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>「从输入 url 到页面渲染」文章已经整理（抄）完了，面对如此复杂的机制，很多地方依旧不理解，明天开始准备从基础慢慢开始学习。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2019-03-04-JS的执行阶段</title>
      <link href="/2019/03/04/2019-03-04-JS%E7%9A%84%E6%89%A7%E8%A1%8C%E9%98%B6%E6%AE%B5/"/>
      <url>/2019/03/04/2019-03-04-JS%E7%9A%84%E6%89%A7%E8%A1%8C%E9%98%B6%E6%AE%B5/</url>
      
        <content type="html"><![CDATA[<h2 id="JS-的执行阶段"><a href="#JS-的执行阶段" class="headerlink" title="JS 的执行阶段"></a>JS 的执行阶段</h2><p>当解释器解释完语法规则后，就开始执行，然后整个执行流程中大致包含：</p><ul><li>执行上下文，执行堆栈概念（如全局上下文，当前活动上下文）</li><li>VO（变量对象）和 AO（活动对象）</li><li>作用域脸</li><li>this 机制</li></ul><h3 id="执行上下文"><a href="#执行上下文" class="headerlink" title="执行上下文"></a>执行上下文</h3><ul><li>JS 有执行山下文</li><li>浏览器首次载入脚本，它将创建「全局执行上下文」，并亚压入执行栈栈顶（不可以被弹出）</li><li>然后每进入其他作用域就创建对应的执行上下文并把它压入执行栈的顶部</li><li>一旦对应的上下文执行完毕，就会从栈顶端弹出，并将上下文控制权交给当前的栈</li><li>依次进行，直至回到全局执行上下文</li></ul><a id="more"></a><p>如果程序执行完成，被弹出执行栈，然后有没有被应用（没有形成闭包），那么这个函数中用的内存就被垃圾处理自动回收。</p><p><img src="https://ws1.sinaimg.cn/large/006tKfTcgy1g0qztu4q9vj30cv02fmx2.jpg" alt="image"></p><h4 id="每个执行上下文都有三个重要属性"><a href="#每个执行上下文都有三个重要属性" class="headerlink" title="每个执行上下文都有三个重要属性"></a>每个执行上下文都有三个重要属性</h4><ul><li>变量对象（Variable object ， VO）</li><li>作用域链（Scope chain）</li><li>this</li></ul><p><img src="https://ws4.sinaimg.cn/large/006tKfTcgy1g0qzwz985ij309g06xq2x.jpg" alt="image"></p><h4 id="VO-和-AO"><a href="#VO-和-AO" class="headerlink" title="VO 和 AO"></a>VO 和 AO</h4><p>VO 是执行上下文的属性，但是只有全局上下文的变量对象允许通过 VO 的属性名称来间接访问（因为在全局上下文里，全局对象自身就是变量对象）</p><p>AO（activation object），当函数被调用者激活，AO 就被创建了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">在函数上下文中：VO === AO</span><br><span class="line">在全局上下文中：VO === this === global</span><br></pre></td></tr></table></figure><p>总体来说，VO 中会存放些变量信息（比如声明的变量，函数，arguments 参数等等）</p><h3 id="作用域链"><a href="#作用域链" class="headerlink" title="作用域链"></a>作用域链</h3><blockquote><p>作为执行上下文的一个属性，原理和原型链很相似，作用很重要。</p></blockquote><h4 id="流程简述"><a href="#流程简述" class="headerlink" title="流程简述"></a>流程简述</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">在函数上下文中，查找一个变量foo</span><br><span class="line">如果函数的VO中找到了，就直接使用</span><br><span class="line">否则去它的父级作用域中（__parent__）找</span><br><span class="line">以此往上级找寻，直到全局上下文中没有找到报错。</span><br></pre></td></tr></table></figure><p><img src="https://ws4.sinaimg.cn/large/006tKfTcgy1g0r08hdnhcj30650bu0sv.jpg" alt="image"></p><h4 id="this-指针"><a href="#this-指针" class="headerlink" title="this 指针"></a>this 指针</h4><p><strong>this 是执行上下文环境的一个属性，而不是某个变量对象的属性</strong></p><p>因此：</p><ul><li>this 是没有一个类似搜寻变量的过程</li><li>当代码中使用了 this，这个 this 的值就直接从执行上下文中获取了，而不会从作用域链中搜寻</li><li>this 的值在取决中进入上下文时的情况</li></ul><p>举个例子</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">var baz = 200;</span><br><span class="line">var bar = &#123;</span><br><span class="line">    baz: 100,</span><br><span class="line">    foo: function() &#123;</span><br><span class="line">        consoloe.log(this.baz)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var foo = bar.foo;</span><br><span class="line">// 进入环境： global</span><br><span class="line">foo(); // 200，但是严格环境下会报错，Cannot ready property &apos;baz&apos; of undefined</span><br><span class="line">// 进入环境：global bar</span><br><span class="line">bar.foo(); // 100</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2019-02-28-JS引擎解析过程-解释阶段</title>
      <link href="/2019/02/28/2019-02-28-JS%E5%BC%95%E6%93%8E%E8%A7%A3%E6%9E%90%E8%BF%87%E7%A8%8B-%E8%A7%A3%E9%87%8A%E9%98%B6%E6%AE%B5/"/>
      <url>/2019/02/28/2019-02-28-JS%E5%BC%95%E6%93%8E%E8%A7%A3%E6%9E%90%E8%BF%87%E7%A8%8B-%E8%A7%A3%E9%87%8A%E9%98%B6%E6%AE%B5/</url>
      
        <content type="html"><![CDATA[<h2 id="JS-引擎解析过程"><a href="#JS-引擎解析过程" class="headerlink" title="JS 引擎解析过程"></a>JS 引擎解析过程</h2><h3 id="什么是-JS-引擎？"><a href="#什么是-JS-引擎？" class="headerlink" title="什么是 JS 引擎？"></a>什么是 JS 引擎？</h3><blockquote><p>JavaScript 解析引擎是为「读懂」JavaScript 代码，并准确地给出代码运行结果的一段程序。</p></blockquote><p>举个栗子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var a = 1 + 1;</span><br></pre></td></tr></table></figure><p>JavaScript 引擎所做的事情就是看懂（解析）这段代码，并将 a 的值变成 2</p><h3 id="JS-的解释阶段"><a href="#JS-的解释阶段" class="headerlink" title="JS 的解释阶段"></a>JS 的解释阶段</h3><blockquote><p>JS 是解释型语言，所以它无需提前编译，而是由解释器实时运行的</p></blockquote><a id="more"></a><p>引擎对 JS 的处理过程：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1.读取代码，进行词法分析（Lexical analysis），然后讲代码分解成词元（token）</span><br><span class="line">2.对词元进行语法分析（parsing），然后将代码整理成语法书（syntax tree）</span><br><span class="line">3.使用翻译器（translator），将代码转为字节码（bytecode）</span><br><span class="line">4.使用字节码解释器（bytecode interpreter），讲字节码转为机器码</span><br></pre></td></tr></table></figure><p>最终计算机执行的就是机器码。<br>为了提高运行速度，浏览器一般采用即时翻译（JIT-JustIn Time compiler）</p><p>即字节码只在运行时编译，用到哪一行就编译哪一行，并且把编码结果缓存（iniline cache）</p><p>这样会使整个程序的运行速度提升<br>而且对于不同的浏览器可能策略不同，有的浏览器为了省略了字节码的翻译过程，直接转为机器码（比如 chrome 的 v8）</p><p>总结：核心的 JIT 编译器可以将源码编译成机器码运行</p><h3 id="JS-的预处理阶段"><a href="#JS-的预处理阶段" class="headerlink" title="JS 的预处理阶段"></a>JS 的预处理阶段</h3><p>上述讲的解释器的整体过程，再讲一下在正式执行 JS 之前，还会有一个预处理阶段</p><ul><li>变量提升</li><li>分号补全</li><li>处理变量冲突</li><li>···</li></ul><h4 id="分号补全"><a href="#分号补全" class="headerlink" title="分号补全"></a>分号补全</h4><p>这个比较简单</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">console.log(&apos;a&apos;)</span><br><span class="line">console.log(&apos;b&apos;)</span><br></pre></td></tr></table></figure><p>JS 预处理会在后面加上分号，因为 JS 解释器有一个「Semicolon Insertion」规则，他会按照一定规则，在适当的位置补充分号</p><p>规则（不全）:</p><ul><li>当有换行符的时候（包括含有换行符的多行注释），并且下一句 token 没有根前面的语法匹配时，自动添加分号。</li><li>当有}时候，如果缺少分号，会添加分号</li><li>程序源代码结束是，如果缺少分号，会补分号。</li></ul><p>最终</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">console.log(&apos;a&apos;);</span><br><span class="line">console.log(&apos;b&apos;);</span><br></pre></td></tr></table></figure><p>举一个反例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">function b() &#123;</span><br><span class="line">    return</span><br><span class="line">    &#123;</span><br><span class="line">        a: &apos;a&apos;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可能你想输入的结果是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;a: &apos;a&apos;&#125;</span><br></pre></td></tr></table></figure><p>但是由于分号补全机制，最后会变成：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">function b()&#123;</span><br><span class="line">    return;</span><br><span class="line">    &#123;</span><br><span class="line">        a:&apos;a&apos;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行以后就是</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">undefined</span><br></pre></td></tr></table></figure><p>变量提升</p><blockquote><p>在执行过程中，可能开头没有定义变量或者函数，但是往往并没有报错。</p></blockquote><p>其中包括函数提升和变量提升</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">a  = 1;</span><br><span class="line">b();</span><br><span class="line">function b()&#123;</span><br><span class="line">    console.log(&apos;b&apos;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var a;</span><br><span class="line">b();</span><br></pre></td></tr></table></figure><p>由于变量提升，最终结果,2 个 b()都会执行，a 会被赋值。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2019-02-27-CSS的可视化格式模型(2)</title>
      <link href="/2019/02/27/2019-02-27-CSS%E7%9A%84%E5%8F%AF%E8%A7%86%E5%8C%96%E6%A0%BC%E5%BC%8F%E6%A8%A1%E5%9E%8B(2)/"/>
      <url>/2019/02/27/2019-02-27-CSS%E7%9A%84%E5%8F%AF%E8%A7%86%E5%8C%96%E6%A0%BC%E5%BC%8F%E6%A8%A1%E5%9E%8B(2)/</url>
      
        <content type="html"><![CDATA[<blockquote><p>上一篇忘了说明什么是格式上下文（FC）</p></blockquote><h2 id="FC"><a href="#FC" class="headerlink" title="FC"></a>FC</h2><blockquote><p>Formattinf Context,格式上下文。它定义了框内部的元素渲染规则，比较抽象。</p></blockquote><p>FC 像是一个容器，里面内部包含元素。容器可以隔开里面的额元素和外面的元素，保护内部元素被外部元素影响。</p><blockquote><p>注意，并不是说所有的框都产生 FC，而是符合特定条件才会产生，只有产生了对于的 FC 后才会应用对应渲染规则</p></blockquote><a id="more"></a><h2 id="IFC（inline-Formatting-Context）"><a href="#IFC（inline-Formatting-Context）" class="headerlink" title="IFC（inline Formatting Context）"></a>IFC（inline Formatting Context）</h2><blockquote><p>行内框产生的格式上下文</p></blockquote><h3 id="IFC-规则"><a href="#IFC-规则" class="headerlink" title="IFC 规则"></a>IFC 规则</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">在行内格式化上下文中框一个接一个水平排列，七点是包含块的顶部。</span><br><span class="line"></span><br><span class="line">水平方向上的margin，border和padding在框之间得以保留</span><br><span class="line"></span><br><span class="line">框在垂直方向上可以以不同的方式对齐：它们的顶部或底部对齐，或根据其中文字的基线对齐</span><br><span class="line"></span><br><span class="line">浮动元素可能会处于包含块的边缘和行款边缘之间</span><br><span class="line"></span><br><span class="line">尽管在相同的行内格式胡上下问中的行框通常拥有相同的宽度，他们可能会因为浮动元素缩短了可用宽度，而在宽度上发生变化</span><br><span class="line"></span><br><span class="line">同一行内格式化上下文中的行框通常高度不一样（如，一行包含了一个高的图形，而其他行只包含了文本）</span><br><span class="line"></span><br><span class="line">当一行中行内宽度和总和小鱼包含他们的行框的宽，他们在水平方向上对齐，取决于「text-align」的属性</span><br><span class="line"></span><br><span class="line">空的行内框应该被忽略</span><br><span class="line"></span><br><span class="line">及不包含,保留空白符，margrin/padding/border非0的行内元素，以及其他常规流中的内容（比如，图片，inline-blcoks和inline-tables）并且不是以换行结束的行框，</span><br><span class="line">必须被当做零高度行框对待</span><br></pre></td></tr></table></figure><h3 id="行匡"><a href="#行匡" class="headerlink" title="行匡"></a>行匡</h3><p>包含那些框的长方形区域，会形成一行，叫行框</p><p>行框的宽度由它的包含块和其中的浮动元素决定，高度的确定由行高度计算规则决定</p><h3 id="行框的规则"><a href="#行框的规则" class="headerlink" title="行框的规则"></a>行框的规则</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">如果几个行内框在水平方向无法放入一个行框内，它们可以分配在两个或者多个行框垂直堆叠的行框内</span><br><span class="line">行框在堆叠时没有垂直方向上的分割且永不重叠</span><br><span class="line">行框的高度总是足够容纳所包含的所有框，不过他可能高于它包含的最高的框</span><br><span class="line">行框的左边接触到其包含快的左边，后边接触到其包含块的右边</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li>行内元素总会应用 IFC 渲染规则</li><li>行内元素会应用 IFC 规则渲染，例如「text-align」可以用来居中</li><li>块框内部，对语文本这类的匿名元素，会产生匿名行框包围，而行框内部就应用 IFC 渲染规则</li><li>行内框内部，对于那些行内元素，应该应用 IFC 渲染规则</li><li>另外， 「inline-block」，挥着元素外层生成 IFC（所以这个元素是可以通过「text-align」来水平居中的），当然它内部则是按照 BFC 规则渲染</li></ul><h4 id="相比较-BFC-规则，IFC-可能更加抽奖（因为没有那么清晰的规则和触发条件）"><a href="#相比较-BFC-规则，IFC-可能更加抽奖（因为没有那么清晰的规则和触发条件）" class="headerlink" title="相比较 BFC 规则，IFC 可能更加抽奖（因为没有那么清晰的规则和触发条件）"></a>相比较 BFC 规则，IFC 可能更加抽奖（因为没有那么清晰的规则和触发条件）</h4><h4 id="但是总体来说，它就是行内元素自身如何显示以及在框内如何摆放的渲染规则。"><a href="#但是总体来说，它就是行内元素自身如何显示以及在框内如何摆放的渲染规则。" class="headerlink" title="但是总体来说，它就是行内元素自身如何显示以及在框内如何摆放的渲染规则。"></a>但是总体来说，它就是行内元素自身如何显示以及在框内如何摆放的渲染规则。</h4>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2019-02-26-CSS的可视化格式模型</title>
      <link href="/2019/02/26/2019-02-26-CSS%E7%9A%84%E5%8F%AF%E8%A7%86%E5%8C%96%E6%A0%BC%E5%BC%8F%E6%A8%A1%E5%9E%8B/"/>
      <url>/2019/02/26/2019-02-26-CSS%E7%9A%84%E5%8F%AF%E8%A7%86%E5%8C%96%E6%A0%BC%E5%BC%8F%E6%A8%A1%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="CSS-的可视化格式模型"><a href="#CSS-的可视化格式模型" class="headerlink" title="CSS 的可视化格式模型"></a>CSS 的可视化格式模型</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><ul><li>CSS 中规定每个元素都有自己的盒子模型</li><li>可视化格式模型则是把这些盒子按照规则摆放到页面上布局</li><li>盒子模型规定了怎么在页面上布局盒子和盒子之间的相互作用</li></ul><p>CSS 的可视化格式模型规定了浏览器在页面中如何处理文档树</p><p>其中包括了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">包含块（Containing Block)</span><br><span class="line">控制框（Controlling Box）</span><br><span class="line">BFC（Block Formatting Context）</span><br><span class="line">IF（Inline Formatting Context）</span><br><span class="line">定位体系</span><br><span class="line">浮动</span><br></pre></td></tr></table></figure><a id="more"></a><p>CSS 包含了三种定位机制：<strong>普通</strong>，<strong>浮动</strong>，<strong>决定定位</strong></p><h3 id="包含快（Containing-Block）"><a href="#包含快（Containing-Block）" class="headerlink" title="包含快（Containing Block）"></a>包含快（Containing Block）</h3><blockquote><p>一个元素的 box 的定位尺寸，会与某个矩形框有关，这个框就称之为包含块。元素会为他的子孙元素创建包含块，但是并不是说元素的包含块就是它的父元素，元素的包含块与它的祖先元素的样式等有关系</p></blockquote><p>通俗的讲，就是定位参考框或者定位左边参考系</p><p>比如：</p><ul><li>根元素是最顶端的元素，它没有父节点，它的包含块就是初始包含块</li><li>static 和 relative 的包含块是由它最近的块级、单元格或者行内块祖先元素的内容框（content）创建的。</li><li>fixed 的包含块是当前的可是窗口</li><li>absolute 的包含块由他最近的 position 属性为<strong>abosolute</strong>，<strong>relative</strong>，<strong>fixed</strong>的祖先元素创建<ul><li>如果其祖先元素是行内元素，则包含块取决于其祖先元素的 direction 特性</li><li>如果祖先元素不是行内元素，那么包含块的区域应该为祖先元素的内边距边界</li></ul></li></ul><blockquote><p>direction: 设置文本方向</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">div&#123;</span><br><span class="line">    direction: rtl;</span><br><span class="line"></span><br><span class="line">    rtl //文本方向从右到左。</span><br><span class="line">    ltl //默认。文本方向从左到右。</span><br><span class="line">    inherit //规定应该从父元素继承 direction 属性的值。</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="控制框（Controlling-Box）"><a href="#控制框（Controlling-Box）" class="headerlink" title="控制框（Controlling Box）"></a>控制框（Controlling Box）</h3><blockquote><p>块级元素和块框以及行内元素和行框的相关概念</p></blockquote><p><strong>块框</strong></p><ul><li>块级元素会生成一个块框（Block Box），块框会占据一整行，用来包含子 box 和生成的内容</li><li>块框同时也是一个块包含框（Containing Box），里面要么只包含块框，要么只能包含行内块（不能混淆），如果块框内部有块级元素也有行内元素，那么行内元素会被匿名块框包围</li></ul><h4 id="匿名块框"><a href="#匿名块框" class="headerlink" title="匿名块框"></a>匿名块框</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">    Some text</span><br><span class="line">    &lt;p&gt;More text&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>div 生成一个块框，包含了另外一个块框 p 以及文本内容「Sometext」，此时「Some text」文本会被强制加上一个匿名的块框里面，被 div 生成的块框包含</p><p>如果一个块框在其中包含了另外一个块框，那么我们强迫它只能包含块框，因此其他文本内容生产出来的都是匿名块框</p><h4 id="行内框"><a href="#行内框" class="headerlink" title="行内框"></a>行内框</h4><ul><li>一个行内元素生成一个行内框</li><li>行内元素能排在一行，允许左右有其他元素</li></ul><p>关于匿名行内框的生成：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;P&gt;Some &lt;EM&gt;emphasized&lt;/EM&gt; text&lt;/P&gt;</span><br></pre></td></tr></table></figure><p>p 元素生成一个块框，其中有几个行内框（如 EM），以及文本「Some」「text」，此时会专门为这些文本生成匿名行内狂</p><h4 id="display-属性影响"><a href="#display-属性影响" class="headerlink" title="display 属性影响"></a>display 属性影响</h4><p>display 的几个属性也可以影响不同框的生成：</p><ul><li>block：元素生成一个块框</li><li>inline：元素生成一个或多个行内框</li><li>inline-block：元素生成一个行内块级框，行内块级的内部会被当做块级来格式化，因此元素本身会被当做行内框来格式化</li><li>none：不生成框，不在格式化结构中</li></ul><blockquote><p>visibility:hidden 产生一个不可见的框</p></blockquote><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>1.如果一个框内有一个块级元素，那么这个框里的内容都会被当做块框来进行格式化，因为只要出现块级元素，就会将里面的内容分块几块，每一块独占一行（出现行内，则用匿名块框包含） 2.如果一个框内，没有任何块级元素，那么这个框里的内容会被当做行内框来格式化，因为里面的内容按照顺序成行的排列</p><h3 id="BFC（Block-Formatting-Context）"><a href="#BFC（Block-Formatting-Context）" class="headerlink" title="BFC（Block Formatting Context）"></a>BFC（Block Formatting Context）</h3><blockquote><p>块级格式化上下文，浮动元素和绝对定位元素，非块级盒子的块级，以及 overflow 不为「visiable」的块级盒子，都会为他们的内容创建新的 BFC</p></blockquote><p>在块级格式化上下文中，每个元素左边与包含块的左边相接触（对于从右到左的格式化，右外边接触右边），即使寸浮动也是如此（所以浮动元素正常会直接贴近它的包含块的左边，与普通元素重合）</p><blockquote><p>除非这个元素也创建一个新的 BFC</p></blockquote><h4 id="特点："><a href="#特点：" class="headerlink" title="特点："></a>特点：</h4><p>1.内部 box 在垂直防线，一个接一个的放置<br>2.box 的垂直方向由 margin 决定，属于同一个 BFC 的两个 box 间的 margin 会重叠（这个比较重要）<br>3.BFC 就是页面上的一个隔离的独立容器，容器里面的子元素不会影响外卖的元素。 4.计算 BFC 的高度时候，浮动元素也会计算（不会浮动坍塌）</p><h4 id="如何触发-BFC？"><a href="#如何触发-BFC？" class="headerlink" title="如何触发 BFC？"></a>如何触发 BFC？</h4><p>1.根元素<br>2.float 不为 none<br>3.position 为 absolute 或者 fixed<br>4.dispaly 为 inline-block、flex、inline-flex、table、tablec-cell、table-caption<br>5.overflow 不为 visible</p><blockquote><p>ps:「display:table」，它本身不产生 BFC，但是它会产生匿名框（包含 display:table-cell 的框），而这个匿名框产生 BFC</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2019-02-21-解析页面流程（3）HTML初始化遇到外链的处理</title>
      <link href="/2019/02/21/2019-02-21-%E8%A7%A3%E6%9E%90%E9%A1%B5%E9%9D%A2%E6%B5%81%E7%A8%8B%EF%BC%883%EF%BC%89HTML%E5%88%9D%E5%A7%8B%E5%8C%96%E9%81%87%E5%88%B0%E5%A4%96%E9%93%BE%E7%9A%84%E5%A4%84%E7%90%86/"/>
      <url>/2019/02/21/2019-02-21-%E8%A7%A3%E6%9E%90%E9%A1%B5%E9%9D%A2%E6%B5%81%E7%A8%8B%EF%BC%883%EF%BC%89HTML%E5%88%9D%E5%A7%8B%E5%8C%96%E9%81%87%E5%88%B0%E5%A4%96%E9%93%BE%E7%9A%84%E5%A4%84%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h2 id="Chrome-中的调试"><a href="#Chrome-中的调试" class="headerlink" title="Chrome 中的调试"></a>Chrome 中的调试</h2><p>Chrome 的开发者工具中，Perfromance 中可以看到详细的渲染工程<br><img src="https://ws3.sinaimg.cn/large/006tKfTcgy1g0ebgvx4h6j30p00c0ab4.jpg" alt="image"></p><h2 id="资源外链的下载"><a href="#资源外链的下载" class="headerlink" title="资源外链的下载"></a>资源外链的下载</h2><blockquote><p>在解析 html 时，会遇到一些资源链接，此时需要进行单独处理</p></blockquote><p>一般情况，静态资源分为几个大类（未全列举）：</p><ul><li>CSS 样式资源</li><li>JS 脚本资源</li><li>img 图片资源</li></ul><h4 id="遇到外链时的处理"><a href="#遇到外链时的处理" class="headerlink" title="遇到外链时的处理"></a>遇到外链时的处理</h4><p>当遇到上述外链的时候，会独立开启一个下载线程去下载资源（HTTP1.1）</p><a id="more"></a><h4 id="遇到-CSS-样式资源"><a href="#遇到-CSS-样式资源" class="headerlink" title="遇到 CSS 样式资源"></a>遇到 CSS 样式资源</h4><p>CSS 资源的处理有几个特点</p><ul><li>CSS 下载时异步，不会阻塞浏览器构建 DOM 树</li><li>但是会阻塞渲染，也就是在构建 render 时候，会等到 css 下载解析完毕才会进行。（这与浏览器优化有关，防止 css 规则不断改变，避免了重复的构建）</li><li>「media query」声明的 CSS 是不会阻塞渲染的</li></ul><h3 id="遇到-JS-脚本资源"><a href="#遇到-JS-脚本资源" class="headerlink" title="遇到 JS 脚本资源"></a>遇到 JS 脚本资源</h3><p>JS 脚本资源的处理有几个特点：</p><ul><li>阻塞浏览器的解析，也就是说发现一个外链脚本时，需等待脚本下载完成并执行后才会解析 HTML</li><li>浏览器的优化，一般现代浏览器有优化，在脚本阻塞时，也会继续下载其他资源（当然也有并发上限），但是虽然脚本可以并行下载，但是解析过程仍然是阻塞的，也即是说必须这个脚本和执行完成后才能继续解析，并行下载只是一个优化操作</li><li>defer 与 async，普通德积小本是会阻塞浏览器解析的，但是可以加上 defer 或者 async 属性，这样脚本就会变成异步了，可以等待解析结束后执行脚本。</li></ul><blockquote><p>值得注意的是，defer 是延迟执行，async 是异步执行</p></blockquote><p>简单的来说：</p><ul><li>「async」是异步执行，异步下载完毕后就会执行，不确保执行顺序，一定在 onload 钱，但是不确定在「DOMContentLoaded」事件的前或者后</li><li>「defer」是延迟执行，在浏览器看起来的效果像是将脚本放在 body 后面一样。</li></ul><h4 id="DOMContentLoaded-事件和-onload-事件的区别"><a href="#DOMContentLoaded-事件和-onload-事件的区别" class="headerlink" title="DOMContentLoaded 事件和 onload 事件的区别"></a>DOMContentLoaded 事件和 onload 事件的区别</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">DOMContentLoaded: 当初始的HTML文档被完全加载和解析后，被触发，无需等待样式表、图像和子框架的加载完成。</span><br><span class="line">onload:仅用于检测一个完全加载的页面（图像、CSS资源等）</span><br></pre></td></tr></table></figure><h4 id="遇到-img-图片类资源"><a href="#遇到-img-图片类资源" class="headerlink" title="遇到 img 图片类资源"></a>遇到 img 图片类资源</h4><p>遇到图片资源时候，直接是异步下载，不会阻塞解析，下载完成后直接使用图片替换原有 SRC</p><blockquote><p>html 基本整理好了，明天和同事有个聚会，就暂时偷个懒，下周开始整理 CSS</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2019-02-20 解析页面流程（2）生成CSS规则和构建渲染</title>
      <link href="/2019/02/20/2019-02-20-%E8%A7%A3%E6%9E%90%E9%A1%B5%E9%9D%A2%E6%B5%81%E7%A8%8B%EF%BC%882%EF%BC%89%E7%94%9F%E6%88%90CSS%E8%A7%84%E5%88%99%E5%92%8C%E6%9E%84%E5%BB%BA%E6%B8%B2%E6%9F%93/"/>
      <url>/2019/02/20/2019-02-20-%E8%A7%A3%E6%9E%90%E9%A1%B5%E9%9D%A2%E6%B5%81%E7%A8%8B%EF%BC%882%EF%BC%89%E7%94%9F%E6%88%90CSS%E8%A7%84%E5%88%99%E5%92%8C%E6%9E%84%E5%BB%BA%E6%B8%B2%E6%9F%93/</url>
      
        <content type="html"><![CDATA[<h2 id="生成-CSS-规则"><a href="#生成-CSS-规则" class="headerlink" title="生成 CSS 规则"></a>生成 CSS 规则</h2><p>同理，CSS 规则树的生成也是类似</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Bytes -&gt; character -&gt; tokens -&gt; nodes -&gt; CSSOM</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1.Conversion：浏览器将获得的HTML内容（Bytes）基于他的编码转换为单个字符</span><br><span class="line">2.Tokenizing分词：浏览器按照HTML规范标准将这些字符转换为不同的标记token。每个token都他有自己独特的含义以及规则及</span><br><span class="line">3.Lexing词法分析：分词的结果是得到了堆的token，此时把他们的转换为对象，这些对象分别定义了他们的属性和规则</span><br><span class="line">4.DOM构建：因为HTML标记定义的就是不同标签之间的关系，这个关系就像是一个树形结构。</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="举个例子"><a href="#举个例子" class="headerlink" title="举个例子"></a>举个例子</h3><h4 id="CSS-代码"><a href="#CSS-代码" class="headerlink" title="CSS 代码"></a>CSS 代码</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">body &#123; font-size: 16px &#125;</span><br><span class="line">p &#123; font-weight: bold &#125;</span><br><span class="line">span &#123; color: red &#125;</span><br><span class="line">p span &#123; display: none &#125;</span><br><span class="line">img &#123; float: right &#125;</span><br></pre></td></tr></table></figure><h4 id="DOM-树："><a href="#DOM-树：" class="headerlink" title="DOM 树："></a>DOM 树：</h4><p><img src="https://ws4.sinaimg.cn/large/006tKfTcgy1g0csljk8rsj30g608bq38.jpg" alt="image"></p><h2 id="构建渲染书"><a href="#构建渲染书" class="headerlink" title="构建渲染书"></a>构建渲染书</h2><blockquote><p>现在「CSS 树」和「DOM 树」都已经完成，浏览器现在要开始构建渲染树了。<br>一般情况，「渲染树」和「DOM 树」相对应的， 但是也不定，因为有些不可见的（display:none;）等等不可见的标签会影响「渲染树」<br><img src="https://ws4.sinaimg.cn/large/006tKfTcgy1g0cspjnnvqj30p00bo0ti.jpg" alt="image"></p></blockquote><h3 id="渲染"><a href="#渲染" class="headerlink" title="渲染"></a>渲染</h3><blockquote><p>有了渲染书（render），开始渲染：</p></blockquote><p><img src="https://ws3.sinaimg.cn/large/006tKfTcgy1g0csqsdknsj30m8064q3c.jpg" alt="image"></p><p>分为四个步骤:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1.计算CSS样式</span><br><span class="line">2.构建渲染书</span><br><span class="line">3.布局，主要定位坐标的和大小，是否换行，各种position overflow z-index 属性</span><br><span class="line">4.绘制，将图像绘制出来</span><br></pre></td></tr></table></figure><p>然后，图中的线与箭头表示通过 JS 动态修改了 DOM 或者 CSS，会导致页面「重新布局（Layout）」、「渲染（Repaint）」</p><h3 id="什么是回流"><a href="#什么是回流" class="headerlink" title="什么是回流?"></a>什么是回流?</h3><blockquote><p>Layout,也叫 Reflow。html 的内容。结构、位置或尺寸发送了变化，需要重新计划样式和渲染树</p></blockquote><h3 id="什么是重绘？"><a href="#什么是重绘？" class="headerlink" title="什么是重绘？"></a>什么是重绘？</h3><blockquote><p>Repaint。元素发生的改变只是影响了元素本身的一些外观之类的（背景，边框颜色等），此时只需要应用新样式绘制这个元素就可以了</p></blockquote><p>回流的成本开销&gt;重绘的成本开销，而且一个节点的回流往往导致子节点以及同级节点的回流。</p><h3 id="什么会引起回流？"><a href="#什么会引起回流？" class="headerlink" title="什么会引起回流？"></a>什么会引起回流？</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1.页面渲染初始化</span><br><span class="line">2.DOM结构改变，比如删除了某个节点</span><br><span class="line">3.render树变化，比如减少了padding</span><br><span class="line">4.窗口resize</span><br><span class="line">5.获取某些属性</span><br><span class="line">6.改变字体大小</span><br></pre></td></tr></table></figure><p>很多浏览器会对回流做优化，会等到数量足够是做一次批处理回流，<br>但是处理 render 树的直接变化，当获取一些属性的时候，浏览器为了获得正确的值也会触发回流，这样使得浏览器优化无效，包括：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1.offset（Top/Left/Width/Height）</span><br><span class="line">2.scroll（Top/Left/Width/Height）</span><br><span class="line">3.cilent（Top/Left/Width/Height）</span><br><span class="line">4.width,height</span><br><span class="line">5.调用了getComputedStyle()/IE的currentStyle</span><br></pre></td></tr></table></figure><h4 id="回流优化方案"><a href="#回流优化方案" class="headerlink" title="回流优化方案"></a>回流优化方案</h4><ul><li>减少逐项更改样式，最好一次性更改 style，或者将样式定义为 Class 并一次性更新</li><li>避免循环操作 dom，创建一个 documentFragment 或者 div，在它上面应用所以 DOM 操作，最后把它添加到 window.document 上</li><li>避免多次读取 offest 等属性。无法避免则将他们缓存为变量。</li><li>将复杂的元素绝对定位或者固定定位，使得他们脱离文档流，否则回流代价会很高</li></ul><p>举个栗子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">var s = document.body.style;</span><br><span class="line"></span><br><span class="line">s.padding = &quot;2px&quot;; // 回流+重绘</span><br><span class="line">s.border = &quot;1px solid red&quot;; // 再一次 回流+重绘</span><br><span class="line">s.color = &quot;blue&quot;; // 再一次重绘</span><br><span class="line">s.backgroundColor = &quot;#ccc&quot;; // 再一次 重绘</span><br><span class="line">s.fontSize = &quot;14px&quot;; // 再一次 回流+重绘</span><br><span class="line">// 添加node，再一次 回流+重绘</span><br><span class="line">document.body.appendChild(document.createTextNode(&apos;abc!&apos;));</span><br></pre></td></tr></table></figure><h3 id="简单层与复杂层"><a href="#简单层与复杂层" class="headerlink" title="简单层与复杂层"></a>简单层与复杂层</h3><p>上述中的渲染中止步于绘制，但实际上绘制这一步，需要从简单层和复杂层来讲。</p><ul><li>可以默认只有一个复合图层，所有的 DOM 节点都在这个图层上面，</li><li>如果开启了硬件加速功能，可以将某个节点转为复合图层</li><li>复合涂层之间的绘制互不干扰，由 GPU 控制</li><li>而简单图层中，就算是 absolute 等布局，变化的时候不影响整体的回流，但是由于在同一个图层中，仍然是会影响绘制的，因此做动画的时候性能仍然很低，而复合图层是独立的，所以一般动画推荐使用硬件加速。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2019-02-19 解析页面流程(1) 解析HTML，构建DOM树</title>
      <link href="/2019/02/19/2019-02-19-%E8%A7%A3%E6%9E%90%E9%A1%B5%E9%9D%A2%E6%B5%81%E7%A8%8B%EF%BC%881%EF%BC%89%20%E8%A7%A3%E6%9E%90HTML%EF%BC%8C%E6%9E%84%E5%BB%BADOM%E6%A0%91/"/>
      <url>/2019/02/19/2019-02-19-%E8%A7%A3%E6%9E%90%E9%A1%B5%E9%9D%A2%E6%B5%81%E7%A8%8B%EF%BC%881%EF%BC%89%20%E8%A7%A3%E6%9E%90HTML%EF%BC%8C%E6%9E%84%E5%BB%BADOM%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<blockquote><p>http 请求完成，浏览器获取到了 html，开始解析并且渲染 HTML</p></blockquote><h3 id="总体流程"><a href="#总体流程" class="headerlink" title="总体流程"></a>总体流程</h3><p>浏览器内核拿到内容后，渲染步骤：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1.解析HTML，构建DOM树</span><br><span class="line">2.解析CSS，生成CSS规则树</span><br><span class="line">3.合并DOM树和CSS规则，生成render树</span><br><span class="line">4.布局render树（Layout/reflow），负责各元素尺寸、位置的计算</span><br><span class="line">5.绘制render数据（paint），绘制页面像素信息</span><br><span class="line">6.浏览器会将各层的信息发送给GPU,GPU会将各层合成（composite），显示在屏幕上</span><br></pre></td></tr></table></figure><a id="more"></a><p><img src="https://ws1.sinaimg.cn/large/006tKfTcgy1g0c03h0oqqj30p009sq33.jpg" alt="image"></p><h3 id="解析-HTML，构建-DOM-树"><a href="#解析-HTML，构建-DOM-树" class="headerlink" title="解析 HTML，构建 DOM 树"></a>解析 HTML，构建 DOM 树</h3><blockquote><p>这是渲染流程第一步，浏览器将解析 HTML，构建成 DOM 树，</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">流程：Bytes  -&gt;  characters -&gt;  tokens   -&gt;  node  -&gt;  DOM</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width,initial-scale=1&quot;&gt;</span><br><span class="line">    &lt;link href=&quot;style.css&quot; rel=&quot;stylesheet&quot;&gt;</span><br><span class="line">    &lt;title&gt;Critical Path&lt;/title&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;p&gt;Hello &lt;span&gt;web performance&lt;/span&gt; students!&lt;/p&gt;</span><br><span class="line">    &lt;div&gt;&lt;img src=&quot;awesome-photo.jpg&quot;&gt;&lt;/div&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h4 id="浏览器处理流程大概是这个样子"><a href="#浏览器处理流程大概是这个样子" class="headerlink" title="浏览器处理流程大概是这个样子"></a>浏览器处理流程大概是这个样子</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1.Conversion转换 -&gt;  数据字节流（HTML内容Btyes）基于他的编码生成单个字符</span><br><span class="line">2.Tokenizing分词  -&gt;  由数据字节按浏览器HTML规范标准版生成标签、内容（标记TOKEN），每个TOKEN有他自己的定义和规则集</span><br><span class="line">3.Lexing词法分析 -&gt;  由白标签、内容成Token，此时把它们转换为对象，这些对象分别定义了他们的属性和4规则（header/p/span）</span><br><span class="line">4.DOM构建-&gt;  开始构建由不同的html标签的关系来渲染父-&gt;子结构的树状结构。</span><br></pre></td></tr></table></figure><h4 id="浏览器处理示意图："><a href="#浏览器处理示意图：" class="headerlink" title="浏览器处理示意图："></a>浏览器处理示意图：</h4><p><img src="https://ws4.sinaimg.cn/large/006tKfTcgy1g0c06x3e19j30p00du3zh.jpg" alt="iamge"></p><h4 id="形成-DOM-树："><a href="#形成-DOM-树：" class="headerlink" title="形成 DOM 树："></a>形成 DOM 树：</h4><p><img src="https://ws3.sinaimg.cn/large/006tKfTcgy1g0c083cudtj30ih07wq36.jpg" alt="image"></p><h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><blockquote><p>今天的内容比较少，一是最近工作挺多的，二是今天家里换了 200M 的网（免费的<del>~ 开心</del>），突然发现原先的路由器「小米路由器 3」和「小米电力猫」、交换机均不支持 200M 的速率，LAN 和 WAN 端口支持 100M，so 要花点时间挑选一个性价比高的路由器的电力猫。</p></blockquote><p><img src="https://ws2.sinaimg.cn/large/006tKfTcgy1g0c0foevnhj30hs0gyq3u.jpg" alt="image"></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2019-02-18-http2.0、https（2）</title>
      <link href="/2019/02/18/2019-02-18-http2.0%E3%80%81https%EF%BC%882%EF%BC%89/"/>
      <url>/2019/02/18/2019-02-18-http2.0%E3%80%81https%EF%BC%882%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="头部的区别"><a href="#头部的区别" class="headerlink" title="头部的区别"></a>头部的区别</h2><blockquote><p>从 http1.0 到 http1.1，改进了很多头部</p></blockquote><ul><li>http1.0 的缓存控制：<ul><li>Pragma：严格来说，它不属于专门的缓存控制头，但是它设置了「no-cache」可以让本地强缓存失效（相当于一个配置项）</li><li>Expires：服务器配置，属于强缓存，用来控制在规定的时间之前，浏览器不会发出请求，而是直接使用本地缓存，注意，Expires 一般对应服务器端时间，如 Expires：Fri，30 Oct 2001 12:22:12</li><li>If-Modifien-Since/Last-Modifed:这个、两个是成对出现的，属于协商缓存的内容，其中浏览器的头部是「If-Modified-Since」，而服务端的是「Last-Modified」，他的作用是，在发起请求时，如果「If-Modified-Since」和「Last-Modified」匹配， 那么代表服务器资源并未改变，因此服务器不会返回资源实体，而是只返回头部，通知浏览器可以使用本地缓存。「Last-Modified」-&gt; 文件最后修改的时间，只能精确到 1s</li></ul></li><li>http1.1 的缓存控制：<ul><li>Cache-Control：缓存控制头部，有 no-cache、max-age 等多种取值。</li><li>Max-Age： 服务器配置的，用来控制强缓存，在规定的时间之内，浏览器无需发送请求，直接使用本地缓存，注意「Max-Age」是「Cache-Control」的值，不是独立的头部，例如「Cache-Control:max-age=3600」,而且它的值是绝对时间，由服务器计算</li><li>If-None-Match/E-tag:这两个是成对出现的，属于协商缓存的内容，其实浏览器头部的是「If-None-Match」，而服务端的是「E-tag」，同样，发出请求后， 如果「If-None-Match」和「E-tag」匹配，则代表内容未变，通知浏览器使用本地缓存，和「Last-Modified」不同，「E-tag」更精确，它是类似于指纹一样的东西，基于「FileEtag INode Mtime Size」生成的，也是只要文件变，指纹就会变，而且没有任何精度限制</li></ul></li></ul><a id="more"></a><h3 id="Max-Age-与-Expires-的区别"><a href="#Max-Age-与-Expires-的区别" class="headerlink" title="Max-Age 与 Expires 的区别"></a>Max-Age 与 Expires 的区别</h3><p>「Expires」使用的是服务器端的本地时间，但是有时客户端时间好服务器端时间不同步，导致了浏览器本地的缓存失效或者过期</p><p>所以不推荐 Expires，而且 Max-Age 使用的是客户端本地时间计算，所以不会有这个问题，所以推荐使用 Max-Age</p><h4 id="PS：同时启动了-Cache-Control-与-Expires，Cache-Contrl-优先级更高。"><a href="#PS：同时启动了-Cache-Control-与-Expires，Cache-Contrl-优先级更高。" class="headerlink" title="PS：同时启动了 Cache-Control 与 Expires，Cache-Contrl 优先级更高。"></a>PS：同时启动了 Cache-Control 与 Expires，Cache-Contrl 优先级更高。</h4><h3 id="E-tag-和-Last-Modified-的区别"><a href="#E-tag-和-Last-Modified-的区别" class="headerlink" title="E-tag 和 Last-Modified 的区别"></a>E-tag 和 Last-Modified 的区别</h3><ul><li>Last-Modified:<ul><li>表明服务器端的文件时最后何时改变的</li><li>缺点：只能精确到 1s</li><li>服务端的文件会周期性改变，导致缓存失效</li></ul></li><li>E-tag：<ul><li>是一种种指纹机制，可以代表文件的相关唯一性</li><li>只有文件改变，缓存才会变</li><li>没有精确时间的限定</li></ul></li></ul><h3 id="图解"><a href="#图解" class="headerlink" title="图解"></a>图解</h3><p><img src="https://ws1.sinaimg.cn/large/006tKfTcgy1g0atbc7vpfj30m80djq34.jpg" alt="image"></p><h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><blockquote><p>第一步，HTTP 请求终于讲完了，其实我之前对整个请求体系基本不知道多少。明天开始我会开始整理（抄）解析页面流程，敬请期待！</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2019-02-17-http2.0、https（1）</title>
      <link href="/2019/02/17/2019-02-17-http2.0%E3%80%81https%EF%BC%881%EF%BC%89/"/>
      <url>/2019/02/17/2019-02-17-http2.0%E3%80%81https%EF%BC%881%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="http2-0"><a href="#http2-0" class="headerlink" title="http2.0"></a>http2.0</h2><blockquote><p>HTTP/2，即超文本传输协议 2.0，是下一代 HTTP 协议。是互联网工程任务组的 httpbis 小组开发进行。在开放互联网上 HTTP 2.0 将只用于 https://网址，而 http:// 网址将继续使用 HTTP/1，目的是在开放互联网上增加使用加密技术，以提供强有力的保护去遏制主动攻击。DANE RFC6698 允许域名管理员不通过第三方 CA 自行发行证书</p></blockquote><a id="more"></a><p>就是 http 的下一代规范</p><h3 id="http2-0-和-http1-1-的不同之处"><a href="#http2-0-和-http1-1-的不同之处" class="headerlink" title="http2.0 和 http1.1 的不同之处"></a>http2.0 和 http1.1 的不同之处</h3><ul><li>http1.1 中，每次请求资源都需要开启一个 tcp/ip 请求，因为 tcp/ip 有并发数炼制，所以当资源一多，就会影响页面加载速度。</li><li>http2.0，一个 tcp/ip 请求可请求多个资源，提高效率</li><li>http2.0 采用二进制而非文本格式，将所有的信息分割为更小的消息和帧，提高请求速度，降低延迟。</li><li>http2.0 使用报头压缩</li><li>http2.0 可以让服务端对客户端的一个请求，响应多次，主动推送到客户端缓存中</li><li>请求优先级，当所有资源都并发请求的时候，可以对特定的资源进行优先传输。</li></ul><h2 id="https"><a href="#https" class="headerlink" title="https"></a>https</h2><blockquote><p>HTTPS（全称：Hyper Text Transfer Protocol over Secure Socket Layer 或 Hypertext Transfer Protocol Secure，超文本传输安全协议），是以安全为目标的 HTTP 通道。即 HTTP 下加入 SSL 层，HTTPS 的安全基础是 SSL，因此加密的详细内容就需要 SSL。</p></blockquote><p>如果需要将网站升级为 https，需要后端去申请证书（SSL）等，同时 http 请求的时候所传输的信息更大，建议 htpp2.0+https。</p><h3 id="SSL"><a href="#SSL" class="headerlink" title="SSL"></a>SSL</h3><blockquote><p>Secure Sockets Layer，安全套接层，一种安全协议，为 TCP/IP 于各种应用层协议之间，为数据通讯提供安全支持。</p></blockquote><h3 id="TLS"><a href="#TLS" class="headerlink" title="TLS"></a>TLS</h3><blockquote><p>Transport Layer Security，及其前身安全套接层（Secure Sockets Layer，缩写作 SSL）是一种安全协议，目的是为互联网通信提供安全及数据完整性保障。该协议由两层组成：TLS 记录协议（TLS Record）和 TLS 握手协议（TLS Handshak）</p></blockquote><h3 id="SSL-TLS-的-握手流程："><a href="#SSL-TLS-的-握手流程：" class="headerlink" title="SSL/TLS 的 握手流程："></a>SSL/TLS 的 握手流程：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">1.浏览器请求建立SSL连接，并向服务端发送一个随机数-Client random和客户端支持的加密方法，比如RSA加密，此时是明文传输。</span><br><span class="line">2.服务端从中选出一组加密算法与HAash算法，回复一个随机数-Server random，并将自己的身份信息以证书的形式发回给客户端（证书中包含了网站地址，非对称加密的公钥，以及证书颁发机构等信息）</span><br><span class="line">3.浏览器收到服务器端的证书后</span><br><span class="line">    1）验证证书的合法性（颁发机构是否合法，证书中包含的网址是否和正在访问的一样），如果证书信任，则浏览器会显示一个小锁，否则会有提示</span><br><span class="line">    2）用户接收证书后（不管信不信任），浏览器会生成一个新的随机数-Premaster Secret，然后证书中的公钥以及制定的加密方法加密「Premaster secret」，发送给服务器端</span><br><span class="line">    3）利用Client random、Server random以及Premaster secret通过一定的算法生成HTTP链接数据传输的对称加密key-「seesion key」。</span><br><span class="line">    4）使用约定好的Hash算法计算握手消息，并使用生成的「session key」对消息进行加密，最后将之前生成的所有信息发送给服务端。</span><br><span class="line">4.服务端收到浏览器的回复</span><br><span class="line">    1）利用已知的加解密方式与自己的私钥进行解密，获取「Premaster secret」</span><br><span class="line">    2）和浏览器相同规则生成「seesion key」</span><br><span class="line">    3）使用「session key」解密浏览器发送的握手消息，并验证Hash是否和浏览器发送的一致</span><br><span class="line">    4）使用「seesion key」加密一段握手消息，发送给浏览器</span><br><span class="line">5.浏览器解密并计算握手消息的Hash，如果与服务器端发来的Hash一样，此时握手流程结束。</span><br></pre></td></tr></table></figure><h3 id="SLL-TLS-握手规则示意图"><a href="#SLL-TLS-握手规则示意图" class="headerlink" title="SLL/TLS 握手规则示意图"></a>SLL/TLS 握手规则示意图</h3><blockquote><p>写了五六遍，勉强能写出像样的示意图，请见谅</p></blockquote><p><img src="https://ws1.sinaimg.cn/large/006tKfTcgy1g09pvdj80sj30u0140jv8.jpg" alt="iamges"></p><h3 id="http-的缓存"><a href="#http-的缓存" class="headerlink" title="http 的缓存"></a>http 的缓存</h3><blockquote><p>前后端的 http 交互中，使用缓存能很大程度上的提升效率，而且对有性能有要求的前端项目都是必用缓存的</p></blockquote><h4 id="强缓存与弱缓存"><a href="#强缓存与弱缓存" class="headerlink" title="强缓存与弱缓存"></a>强缓存与弱缓存</h4><p>缓存可以分为两种类型：</p><ul><li>强缓存（200 from cache）</li><li>协商缓存 （304）</li></ul><p>区别：</p><ul><li>强缓存时，浏览器如果判断本地缓存未过期就会直接使用，无需发起 http 请求</li><li>协商缓存时，浏览器会向服务端发起 http 请求，然后服务端告诉浏览器「文件为改变」，让浏览器使用本地缓存</li></ul><p>对于协商缓存，使用 ctrl + F5 强制刷新可以是协商缓存失效</p><p>但是对于强缓存，在未过期是，必须更新资源路径才能发起新的请求</p><h3 id="缓存头部"><a href="#缓存头部" class="headerlink" title="缓存头部"></a>缓存头部</h3><h4 id="如何区分强缓存和协商缓存"><a href="#如何区分强缓存和协商缓存" class="headerlink" title="如何区分强缓存和协商缓存"></a>如何区分强缓存和协商缓存</h4><p>常用强缓存：</p><ul><li>Cache-Control/Max-age (http1.1)</li><li>Pragma/Expires (http1.0)</li></ul><p>常用协商缓存:</p><ul><li>If-None-Match/E-tag (http1.1)</li><li>If-Modified-Since/last-Modified (http1.0)</li></ul><p>使用「meta」标签可以控制缓存方案-Pragma</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;META HTTP-EQUIV=&quot;Pragma&quot; CONTENT=&quot;no-cache&quot;&gt;</span><br></pre></td></tr></table></figure><blockquote><p>Pragma 方案，支持情况不佳，缓存代理服务器不支持</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Cookie和gizp压缩、长连接与短连接</title>
      <link href="/2019/02/16/2019-02-16-cookie%E5%92%8Cgzip%E3%80%81%E9%95%BF%E4%B8%8E%E7%9F%AD%E8%BF%9E%E6%8E%A5/"/>
      <url>/2019/02/16/2019-02-16-cookie%E5%92%8Cgzip%E3%80%81%E9%95%BF%E4%B8%8E%E7%9F%AD%E8%BF%9E%E6%8E%A5/</url>
      
        <content type="html"><![CDATA[<blockquote><p>今天有些忙，晚上二刷完「流浪地球」才回家，继续整理下昨天接下来的「Cookie」</p></blockquote><h2 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h2><h3 id="什么是-Cookie？"><a href="#什么是-Cookie？" class="headerlink" title="什么是 Cookie？"></a>什么是 Cookie？</h3><blockquote><p>Cookie, 网站为了辨别用户身份、进行 session 跟踪而存储在用户本地终端的数据（加密），规范为 RFC6265</p></blockquote><p>通俗的来说，就是「浏览器缓存」，在网站上来用帮助客户端和服务器校验身份，或者交换数据（通信），结合服务器的 seesion 使用。</p><a id="more"></a><p>举个栗子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">在login页面进行登录的时候，用户点击「登录」</span><br><span class="line">此时，服务端会生成一个seesion，seesion中有对于用户的信息（账号、密码等）</span><br><span class="line">然后会生成一个sessionid（相当于是服务端的这个seesion对应的key）</span><br><span class="line">然后服务器端在登录页面中写入cookie，值就是jessionid=xxx</span><br><span class="line">最后浏览器中本地就有这个cookie，以后再访问同域名下的页面的时候，自动就带上这个sessionid了，就不需要自动登录了。</span><br></pre></td></tr></table></figure><p><img src="https://ws1.sinaimg.cn/large/006tKfTcgy1g08oox73ggj30nq0mewht.jpg" alt="image"><br>一般来说 cookie 是不允许存放敏感信息的（禁止明文存储账号、密码）</p><p>因为在同域名的资源氢气下，浏览器会默认带上本地的 cookie，所以在某些不想带 cookie 信息的情况下，还需要另外处理</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">客户端在域名A下有cookie</span><br><span class="line">但是A下有一个页面，页面中有很多依赖的静态资源（资源都在域名A服务器下面）</span><br><span class="line">此时就在请求这些静态页面的时候，浏览器就会默认带上cookie</span><br><span class="line">这样就会降低访问速度，浪费效能</span><br></pre></td></tr></table></figure><p>比较稳当的解决办法，就是「多域名拆分」。具体作坊就是</p><ul><li>讲静态资源，分别放在不同的域名下（带 cookie 的：<a href="http://www.a.com,不需要带" target="_blank" rel="noopener">www.a.com,不需要带</a> cookie：w<a href="http://www.c.com）" target="_blank" rel="noopener">www.c.com）</a></li><li>而 a.com 在加载页面的时候，加载静态页面就不会带 cookie</li></ul><h4 id="多域名拆分"><a href="#多域名拆分" class="headerlink" title="多域名拆分"></a>多域名拆分</h4><p>在移动端，如果请求的域名过多，会降低请求速度，因为域名解析流程也是需要时间<br>此时，就需要再加一份优化方案「dns-prefetch」，让浏览器在空闲时提前解析 dns 域名。</p><h3 id="cookie-的交互"><a href="#cookie-的交互" class="headerlink" title="cookie 的交互"></a>cookie 的交互</h3><p><img src="https://ws3.sinaimg.cn/large/006tKfTcgy1g08p2fv8khj30pg0grwf7.jpg" alt="image"></p><h2 id="gzip-压缩"><a href="#gzip-压缩" class="headerlink" title="gzip 压缩"></a>gzip 压缩</h2><blockquote><p>http 协议上的 gzip 编码是中用来改进 WEB 应用程序性能的技术。可以让用户更快的速度请求。</p></blockquote><p>gzip 是一中压缩格式，需要浏览器支持才有效，压缩效率比较优秀<br>gzip 一般在「apache」、「tomcat」等 web 服务器开启</p><h2 id="长连接与短连接"><a href="#长连接与短连接" class="headerlink" title="长连接与短连接"></a>长连接与短连接</h2><h3 id="tcp-ip-中的定义"><a href="#tcp-ip-中的定义" class="headerlink" title="tcp/ip 中的定义"></a>tcp/ip 中的定义</h3><ul><li>长连接：一个 tcp/ip 连接上可以连续发送多个数据包，在 tcp 保持连接期间，如果没有数据包发送，需要双方发检验测试包以维持连接，一般需要自己做在线维持。</li><li>短连接：通信双方有数据交互时，就建立一个 tcp 连接，数据交互完成，销毁。</li></ul><h3 id="http-的定义："><a href="#http-的定义：" class="headerlink" title="http 的定义："></a>http 的定义：</h3><ul><li>http1.0 中，默认使用的是短连接，浏览器每进行一次 http 操作，就会建立一次连接，交互结束销毁连接。</li><li>http1.1 中，默认使用长连接，使用长连接会有「Connection:keep-alive」，在长连接情况下，当一个页面打开完成后，客户端和服务端之前用于传输 http 的 tcvp 就不会关闭，如果客户端再次访问这个服务器页面，则会继续使用这条建立过的连接</li></ul><blockquote><p>PS：keep-alive 不会永远保持，也有时间，一般配置在服务器中，另外长连接也需要客户端和服务器都支持该配置才有效。</p></blockquote><h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><p>本来还想整理（抄）一下 http2.0 和 https 的定义和区别，但是时间不早了，该睡了。<br>该睡了。</p><p>该睡了。</p><p>该睡了。</p><p>该睡了。</p><p>该睡了。</p><p>该睡了。</p><p>该睡了。</p><p>该睡了。</p><p>该睡了。</p><p>该睡了。</p><p>该睡了。</p><p>该睡了。</p><p>该睡了。</p><p>该睡了。</p><p>该睡了。</p><p>该睡了。</p><p>该睡了。</p><p>该睡了。</p><p>该睡了。</p><p>该睡了。</p><p>该睡了。</p><p>该睡了。</p><p>该睡了。</p><p>该睡了。</p><p>该睡了。</p><p>该睡了。</p><p>该睡了。</p><h3 id="诶…你怎么还不睡-那么我来写（copy）个彩蛋吧？"><a href="#诶…你怎么还不睡-那么我来写（copy）个彩蛋吧？" class="headerlink" title="诶…你怎么还不睡..? 那么我来写（copy）个彩蛋吧？"></a>诶…你怎么还不睡..? 那么我来写（copy）个彩蛋吧？</h3><blockquote><p>事情是这样的，我 banner 上写的是一句日文「今でもあなたはわたしの光」，来自米津玄師的「Lemon」。然后我哥提醒我「わたし」一般是女的才用，毕竟我哥日文水平还是可以不错的，于是我和我哥就去查了下资料。</p></blockquote><p><img src="https://ws3.sinaimg.cn/large/006tKfTcgy1g08pipshysj30i613egnd.jpg" alt></p><p>以下是来 wiki 的解释</p><p><img src="https://ws4.sinaimg.cn/large/006tKfTcgy1g08pvo9n9pj31e70u0wo1.jpg" alt="image"></p><ul><li><p>私（わたし／watashi）<br>日本人用得最多的一人称。「わたくし」的谦逊说法。男女老少都用，礼貌用语。特别公开场合男的用这个就很礼貌，用「わたくし」就更礼貌了。女性更比男性常用。</p></li><li><p>私（わたくし／watakushi）<br>「私」的自谦、郑重语，对年龄比自己大，地位比自己高的时候使用。公开郑重场合用这个最礼貌。特别是皇族公开演说必须用这个，因为皇族在面向国民的时候需要用自谦的语气说话。</p></li><li><p>自分（じぶん／zibun）</p></li></ul><p>体育协会那些男生多用。相扑力士和棒球选手常用。刑事日剧『西部警察』里面渡哲也演的主人公大門圭介使用这个很有名で、一时期成为了流行語。<br>在文章里面也常用语一人称，这种时候女的也有用的。但是在正式的文书和商务文书禁用。</p><ul><li>僕（ぼく／boku）</li></ul><p>男性在私下场合对同辈或长辈常用，在较正式的场合也有用的，给人亲近、随和的感觉是一种自谦语。就像字面上说的“请把我作为仆人召唤”的感觉，这种时候女性可以用「妾（ショウ）」。</p><ul><li>俺（おれ／ore）</li></ul><p>一般只能男的私下场合用，只能对同辈或者晚辈使用。因为是俗语，所以公开场合不用。用在路飞身上再好不过。</p><blockquote><p>还有好多语法，我就不一一 google translate 了…附上链接:<a href="https://ja.wikipedia.org/wiki/%E6%97%A5%E6%9C%AC%E8%AA%9E%E3%81%AE%E4%B8%80%E4%BA%BA%E7%A7%B0%E4%BB%A3%E5%90%8D%E8%A9%9E#%E7%A7%81%EF%BC%88%E3%82%8F%E3%81%9F%E3%81%97%EF%BC%89" target="_blank" rel="noopener">https://ja.wikipedia.org/wiki/%E6%97%A5%E6%9C%AC%E8%AA%9E%E3%81%AE%E4%B8%80%E4%BA%BA%E7%A7%B0%E4%BB%A3%E5%90%8D%E8%A9%9E#%E7%A7%81%EF%BC%88%E3%82%8F%E3%81%9F%E3%81%97%EF%BC%89</a> （查看请示用「科学上网」）</p></blockquote><h4 id="现在发现有很多东西需要学习，不单单为了我个人的薪资或者理想，可能更多的是想更加了解一点世界。"><a href="#现在发现有很多东西需要学习，不单单为了我个人的薪资或者理想，可能更多的是想更加了解一点世界。" class="headerlink" title="现在发现有很多东西需要学习，不单单为了我个人的薪资或者理想，可能更多的是想更加了解一点世界。"></a>现在发现有很多东西需要学习，不单单为了我个人的薪资或者理想，可能更多的是想更加了解一点世界。</h4>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浏览器如何发起一个完整的HTTP请求(2)</title>
      <link href="/2019/02/15/2019-02-15-http(2)/"/>
      <url>/2019/02/15/2019-02-15-http(2)/</url>
      
        <content type="html"><![CDATA[<blockquote><p>昨天看到请求头部分，整理一些通用请求头，下面整理下常用的响应/请求头</p></blockquote><h2 id="常用的请求头部"><a href="#常用的请求头部" class="headerlink" title="常用的请求头部"></a>常用的请求头部</h2><p><img src="https://ws3.sinaimg.cn/large/006tKfTcgy1g07d0evn94j30h807u3yq.jpg" alt="image"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Accept：接受类型，标示浏览器支持的MIME类型（对标服务器返回的Centent-Type）</span><br><span class="line">Accept-Encoding： 浏览器支持的压缩类型，比如gzip等，超过类型不能接受</span><br><span class="line">Content-Type：客户端发送出去实体内容的类型</span><br><span class="line">Cache-Control：指定请求和响应遵循的缓存机制，如no-cache、no-store</span><br><span class="line">If-Modified-Since：对应服务器的Last-Modified,用来匹配看文件是否变动，精确到1s</span><br><span class="line">Expires：缓存控制，在这个时间内不会请求，直接使用缓存（http1.0，而且是服务器端时间）</span><br><span class="line">Max-age： 代表资源在本地缓存多少秒，有效时间不会请求，而是使用缓存（http1.1）</span><br><span class="line">If-None-Match：对于服务端的ETag，用于匹配文件内容是否改变（非常精确）（http1.1）</span><br><span class="line">Cookie：有cookie并且同域访问时会自动带上（www.baidu.com/a.baidu.com非同域名！）</span><br><span class="line">Host：请求的服务器URL</span><br><span class="line">Origin：最初请求是从哪里发起的（精确到端口），Origin比Referer更遵循隐私</span><br><span class="line">Referer：该页面的来源URL（适用于所有类型的请求，会精确到详细页面，csrf通常会拦截该字段）</span><br><span class="line">User-Agent：用户客户端的一些必要信息</span><br></pre></td></tr></table></figure><a id="more"></a><p><strong>备注</strong></p><blockquote><p>no-cache:可以在本地缓存，可以代理服务器缓存，但是和这个缓存需要服务器验证以后才可以使用</p></blockquote><blockquote><p>no-store:禁用缓存，本地和代理服务器均不准使用,必须从服务器获取</p></blockquote><h3 id="Accept-和-Content-Type-的区别"><a href="#Accept-和-Content-Type-的区别" class="headerlink" title="Accept 和 Content-Type 的区别"></a>Accept 和 Content-Type 的区别</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Accpet属于请求头，Content-Type属于实体头</span><br><span class="line">Accpet：告诉服务端，客户端接收什么类型的信息</span><br><span class="line">Content-Type：发送端（客户端|服务器端）发送的实体数据的数据类型</span><br></pre></td></tr></table></figure><h2 id="常用的响应头"><a href="#常用的响应头" class="headerlink" title="常用的响应头"></a>常用的响应头</h2><p><img src="https://ws4.sinaimg.cn/large/006tKfTcgy1g07d2tzlz5j30gq08zglu.jpg" alt="image"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Access-Control-Allow-Hedaers：服务器端允许的Headers</span><br><span class="line">Access-Control-Allow-Methods：服务器端允许的请求方法</span><br><span class="line">Acees-Control-Allow-Origin：服务器端允许的请求Origin头部</span><br><span class="line">Content-Type：服务器返回的实体内容类型</span><br><span class="line">Data：数据从服务器发起的时间</span><br><span class="line">Cache-Control：告诉浏览器或其他用户，什么环境可以安全的缓存文档</span><br><span class="line">Last-Modified：请求资源的最后修改时间</span><br><span class="line">Expires：文档的过期时间，删除缓存</span><br><span class="line">Max-age：客户端的本地资源的缓存时间(单位-秒)，开启了Cache-Contral后有效</span><br><span class="line">ETag：请求标量的实体标签的当前值</span><br><span class="line">Set-Cookie：设置和页面关联的cookie，服务器通过整个头部把cookie传给客户端</span><br><span class="line">Keep-Alive：客户端有keep-alive，服务端也会响应（timeout=38）</span><br><span class="line">Server：服务器的一些相关信息</span><br></pre></td></tr></table></figure><p>请求头部和响应头部是彼此匹配分析的。</p><p>最常见的：<br>请求头部的 Accept 要和响应头部的 Content-Type 进行匹配，否则会报错。</p><h4 id="其实我在整理之前一直在想为什么请求头部也有「Content-Type」，那为什么不是它和响应头部的「Content-Type」匹配？"><a href="#其实我在整理之前一直在想为什么请求头部也有「Content-Type」，那为什么不是它和响应头部的「Content-Type」匹配？" class="headerlink" title="其实我在整理之前一直在想为什么请求头部也有「Content-Type」，那为什么不是它和响应头部的「Content-Type」匹配？"></a>其实我在整理之前一直在想为什么请求头部也有「Content-Type」，那为什么不是它和响应头部的「Content-Type」匹配？</h4><p>后来，我整理的时候发现，「Content-Type」是实体头部，指的是：「发送端（可以使客户端，也可以是服务端），用来表明发送信息的文档类型的」，也就是说他是发送性质的，「Accept」是接受性质，so 请求头部的「Accept」和响应头部的「Cotent-Type」匹配的。</p><h4 id="举栗子"><a href="#举栗子" class="headerlink" title="举栗子"></a>举栗子</h4><p>造成跨域问题，往往是因为请求头部「Origin」要匹配响应头部的「Access-Control-Allow-Origin」，一旦匹配失败，则会报跨域错误。</p><p>在使用缓存时，请求头部的 If-Modified-Since、If-None-Match 分别和响应头部的 Last-Modified、ETag 对应</p><h3 id="什么是实体头？"><a href="#什么是实体头？" class="headerlink" title="什么是实体头？"></a>什么是实体头？</h3><p><img src="https://ws2.sinaimg.cn/large/006tKfTcgy1g07d19zojoj30h00abmxi.jpg" alt="image"></p><blockquote><p>可以理解为「实体信息」的头部</p></blockquote><h3 id="什么是实体信息？"><a href="#什么是实体信息？" class="headerlink" title="什么是实体信息？"></a>什么是实体信息？</h3><blockquote><p>消息实体分为响应实体、请求实体</p></blockquote><p>在 http 请求中，会将一些需要的参数放入，你比如 POST 请求。</p><p>实体信息中可以放入参数（data=ab&amp;query=123），也可以直接通过表单对象（Form Data 对象，上传时可以带参数、文件、二进制流）</p><p>而 http 响应时候，服务端就会返回实体信息（没错，就是 reponse）</p><p>一般的接口请求，实体信息就是 JSON 格式的数据，然而接口返回的可以使 JSON 格式的数据也可以使 html，然后通过 JS 渲染</p><h3 id="最后讲一下，CRLF"><a href="#最后讲一下，CRLF" class="headerlink" title="最后讲一下，CRLF"></a>最后讲一下，CRLF</h3><blockquote><p>Carriage-Return Line-Feed), 回车换行符</p></blockquote><p>（我也不明白这东西有什么用）</p><p>请求头和实体消息之间有一个 CRLF 分隔，响应头部和响应实体之间用一个 CRLF 分隔</p><p>一般来说（分隔符类别）:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CRLF-&gt;Windows-style</span><br><span class="line">LF-&gt;Unix Style</span><br><span class="line">CR-&gt;Mac Style</span><br></pre></td></tr></table></figure><p>结束下面附上一个 http 请求栗子</p><h3 id="http-请求报文结构栗子："><a href="#http-请求报文结构栗子：" class="headerlink" title="http 请求报文结构栗子："></a>http 请求报文结构栗子：</h3><p><img src="https://ws3.sinaimg.cn/large/006tKfTcgy1g07e2c2i61j30gk0m80uo.jpg" alt="image"></p><h4 id="再说点什么？"><a href="#再说点什么？" class="headerlink" title="再说点什么？"></a>再说点什么？</h4><blockquote><p>今天的内容其实我已经整理的差不多，两天把大牛的 http 请求，简单的整理（抄）了一遍，收获很多，之前一直不懂跨域的原理，以及 request/response 的头部匹配，基本也理解了。从 HTTP 报文结构表面来看至少看出来跨域的问题来自哪里，具体如何解决还需要仔细研究</p></blockquote><p>2019 年 02 月 15 日 20:40:48<br>袁凯忻</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浏览器如何发起一个完整的HTTP请求(1)</title>
      <link href="/2019/02/14/2019-02-14-http/"/>
      <url>/2019/02/14/2019-02-14-http/</url>
      
        <content type="html"><![CDATA[<h2 id="浏览器如何发起一个完整的-HTTP-请求？"><a href="#浏览器如何发起一个完整的-HTTP-请求？" class="headerlink" title="浏览器如何发起一个完整的 HTTP 请求？"></a>浏览器如何发起一个完整的 HTTP 请求？</h2><p>答:==应用层==的发送 http 请求，==DNS==将域名解析成 IP，然后到==传输层==通过==三次握手==建立==TCP/IP 请求==，再到==网络层==的 ip 寻址，再到==数据链路层==的封装成帧，最后到==物理层==的利用物理介质传输。</p><h3 id="五层因特网协议栈"><a href="#五层因特网协议栈" class="headerlink" title="五层因特网协议栈"></a>五层因特网协议栈</h3><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1.应用层(dns,http) DNS解析成IP并发送http请求</span><br><span class="line"></span><br><span class="line">2.传输层(tcp,udp) 建立tcp连接（三次握手）</span><br><span class="line"></span><br><span class="line">3.网络层(IP,ARP) IP寻址</span><br><span class="line"></span><br><span class="line">4.数据链路层(PPP) 封装成帧</span><br><span class="line"></span><br><span class="line">5.物理层(利用物理介质传输比特流) 物理传输（然后传输的时候通过双绞线，电磁波等各种介质）</span><br></pre></td></tr></table></figure><h3 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h3><blockquote><p>超文本传输协议，Web 浏览器和 Web 服务器之间的通信，一般基于 TCP/IP 协议</p></blockquote><h3 id="DNS"><a href="#DNS" class="headerlink" title="DNS"></a>DNS</h3><blockquote><p>Domain Name System，即域名系统。它作为将域名和 IP 地址相互映射的一个分布式数据库，能够使人更方便地访问互联网。DNS 使用 TCP 和 UDP 端口 53[1]。当前，对于每一级域名长度的限制是 63 个字符，域名总长度则不能超过 253 个字符。</p></blockquote><p>可以理解为一个工具将域名和 IP 关联了起来，通过让快速访问到 IP,域名查询到 IP。<br>比较牛逼的网站可能会用 CDN 来进行均衡用户访问负载量。</p><h3 id="CDN"><a href="#CDN" class="headerlink" title="CDN"></a>CDN</h3><blockquote><p>Content Delivery Network，即内容分发网络。网络之上的内容分发网络，依靠部署在各地的边缘服务器，通过中心平台的负载均衡、内容分发、调度等功能模块，使用户就近获取所需内容，降低网络拥塞，提高用户访问响应速度和命中率。CDN 的关键技术主要有内容存储和分发技术。<br>通俗的讲就是在人多的地方放置更多的服务器，当访问量激增，CDN 可以通过全局负载技术将流量平均分配到不同的服务器中，保证流量均很，减少网络拥堵。一般域名查询时会用到 CDN，保证用户访问域名是能获得最快的访问速度</p></blockquote><h3 id="什么是-TCP-IP-协议？"><a href="#什么是-TCP-IP-协议？" class="headerlink" title="什么是 TCP/IP 协议？"></a>什么是 TCP/IP 协议？</h3><blockquote><p>TCP（传输控制协议）和 IP（网际协议）。</p></blockquote><p>通俗的讲，我们所接触的绝大多数 HTTP 请求都是 TCP/IP 请求。<br>tcp 将 http 长报文划分为短报文，通过三次握手与服务端建立连接，进行可靠传输以及断开连接的四次握手。</p><h3 id="什么是三次握手、四次握手？"><a href="#什么是三次握手、四次握手？" class="headerlink" title="什么是三次握手、四次握手？"></a>什么是三次握手、四次握手？</h3><ul><li>三次握手</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">第一次握手：建立连接时，客户端发送syn包（syn=j）到服务器，并进入SYN_SENT状态，等待服务器确认；SYN：同步序列编号（Synchronize Sequence Numbers）。</span><br><span class="line">第二次握手：服务器收到syn包，必须确认客户的SYN（ack=j+1），同时自己也发送一个SYN包（syn=k），即SYN+ACK包，此时服务器进入SYN_RECV状态；</span><br><span class="line">第三次握手：客户端收到服务器的SYN+ACK包，向服务器发送确认包ACK(ack=k+1），此包发送完毕，客户端和服务器进入ESTABLISHED（TCP连接成功）状态，完成三次握手。</span><br></pre></td></tr></table></figure><p>通俗的讲</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.客户端告诉服务端，请求建交</span><br><span class="line">2.服务端告诉客户端，我已经收到请求信息，请确认是否为正确的服务端？</span><br><span class="line">3.客户端确认，正式建交</span><br></pre></td></tr></table></figure><ul><li>四次握手</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">第一次握手：TCP客户端发送一个FIN，用来关闭客户到服务器的数据传送。</span><br><span class="line">第二次握手：服务器收到这个FIN，它发回一个ACK，确认序号为收到的序号加1。和SYN一样，一个FIN将占用一个序号。</span><br><span class="line">第三次握手：服务器关闭客户端的连接，发送一个FIN给客户端。</span><br><span class="line">第四次握手：客户端发回ACK报文确认，并将确认序号设置为收到序号加1。</span><br></pre></td></tr></table></figure><p>通俗的讲</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1.客户端告诉服务器，我要开始和你断交了</span><br><span class="line">2.服务端收到这个断交信息</span><br><span class="line">3.服务器断开连接，并且告诉客户端，服务端断交。</span><br><span class="line">4.客户端获取服务器断交信息，数据通道关闭。</span><br></pre></td></tr></table></figure><p><strong>浏览器对于同一域名的 tcp/ip 并发是有数量限制的，一般是 2~10 个不等，就是 POST/GET 请求在同一域名下请求并发量是有限制的！</strong></p><h3 id="GET-和-POST-的区别"><a href="#GET-和-POST-的区别" class="headerlink" title="GET 和 POST 的区别"></a>GET 和 POST 的区别</h3><p>POST 会发送 2 个 TCP 的包，首先发起预请求，会向服务端发送 headers，如果的到 100 continue,则会发送 data 包，返回数据<br>GET 只会发送一个 TCP 的包，直接向服务端发送 header 和 data，返回数据。</p><h3 id="后台处理流程"><a href="#后台处理流程" class="headerlink" title="后台处理流程"></a>后台处理流程</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1.一般有的后端是有统一的验证的，如安全拦截，跨域验证</span><br><span class="line">2.如果这一步不符合规则，就直接返回了相应的http报文（如拒绝请求等）</span><br><span class="line">3.然后当验证通过后，才会进入实际的后台代码，此时是程序接收到请求，然后执行（譬如查询数据库，大量计算等等）</span><br><span class="line">4.等程序执行完毕后，就会返回一个http响应包（一般这一步也会经过多层封装）</span><br><span class="line">5.然后就是将这个包从后端发送到前端，完成交互</span><br></pre></td></tr></table></figure><h3 id="http-的报文接口"><a href="#http-的报文接口" class="headerlink" title="http 的报文接口"></a>http 的报文接口</h3><blockquote><p>报文接口包含：通用头部，请求/响应头部，请求/响应体</p></blockquote><h4 id="通用头部"><a href="#通用头部" class="headerlink" title="通用头部"></a>通用头部</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Request Url：请求的web服务器地址</span><br><span class="line">Request Method：请求方式（POST/GET/OPTIONS/PUT/DELETED等）</span><br><span class="line">Status Code：状态码（10X/404/200)</span><br><span class="line">Remote Address： 请求远程的web服务器地址（IP）</span><br></pre></td></tr></table></figure><blockquote><p>值得注意的是，在存在跨域问题的时候，可能是 method 为 options，状态码为 404/405 等</p></blockquote><p>在这里主要归纳下状态码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1XX——指示信息，表示请求已接收，继续处理</span><br><span class="line">2XX——成功，表示请求已被成功接收、理解、接受</span><br><span class="line">3XX——重定向，要完成请求必须进行更进一步的操作</span><br><span class="line">4XX——客户端错误，请求有语法错误或请求无法实现</span><br><span class="line">5XX——服务器端错误，服务器未能实现合法的请求</span><br></pre></td></tr></table></figure><p>也就是 4XX 可能是客户端的问题，不单单是服务器端的问题，个人觉得应该优先排除客户端的容器问题（tomcat、iis 等）</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>url和正则表达式的学习</title>
      <link href="/2019/02/13/2019-02-13-url/"/>
      <url>/2019/02/13/2019-02-13-url/</url>
      
        <content type="html"><![CDATA[<h2 id="浏览器的-URL-的构成"><a href="#浏览器的-URL-的构成" class="headerlink" title="浏览器的 URL 的构成"></a>浏览器的 URL 的构成</h2><ul><li>portocal，协议头，例如：http、ftp 等</li><li>host，主机域名或 IP 地址</li><li>port，端口号</li><li>path，目录路径</li><li>query，即查询参数</li><li>fragment，即#后的 hash 值，一般用来定位到某个位置</li></ul><blockquote><p>‘<a href="http://note.youdao.com/?user=admin&amp;query=123#page=top&#39;" target="_blank" rel="noopener">http://note.youdao.com/?user=admin&amp;query=123#page=top&#39;</a> = portocal(https://) + host(<a href="http://www.jianshu.com" target="_blank" rel="noopener">www.jianshu.com</a>) + port(80) + path(/p/d31f494ad6f5) + query(?user=admin&amp;query=123) + fragment(#page=top)</p></blockquote><a id="more"></a><h2 id="window-location"><a href="#window-location" class="headerlink" title="window.location"></a>window.location</h2><ul><li>window.location.hostname，返回 web 主机的域名 (segmentfault.com)</li><li>window.location.pathname，返回当前页面的路径和文件名(a/119….6)</li><li>window.location.port，返回 web 主机的端口</li><li>window.location.portocal，返回所使用的 web 协议（http://）</li><li>window.location.assign(‘<a href="https://www.baidu.com&quot;)，assign(url)，导航到一个新的页面" target="_blank" rel="noopener">https://www.baidu.com&quot;)，assign(url)，导航到一个新的页面</a></li><li>window.location.reload(true) 刷新页面</li><li>window.location.search，获取 url 后额外的数据</li></ul><h2 id="如何获取-url-的额外参数与分析正则表达式"><a href="#如何获取-url-的额外参数与分析正则表达式" class="headerlink" title="如何获取 url 的额外参数与分析正则表达式"></a>如何获取 url 的额外参数与分析正则表达式</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">function getQueryString(name) &#123;</span><br><span class="line">    var reg = new RegExp(&quot;(^|&amp;)&quot; + name + &quot;=([^&amp;]*)(&amp;|$)&quot;, &quot;i&quot;),</span><br><span class="line">        r = window.location.search.substr(1).match(reg);</span><br><span class="line"></span><br><span class="line">    if (r != null) return unescape(r[2]);</span><br><span class="line">        return null;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h3><h4 id="限定符"><a href="#限定符" class="headerlink" title="限定符"></a>限定符</h4><table><thead><tr><th>字符</th><th>描述</th></tr></thead><tbody><tr><td>*</td><td>匹配前面的子表达式零次或者多次。例如，zo*能匹配「z」以及「zoo」。等价于{0,}（只要包含「z」、「o」的字符全直接匹配出来）</td></tr><tr><td>+</td><td>匹配前面的子表达式一次或多次，例如，zo+能匹配「zo」以及「zoo」。等价于{0,1}（只要包含「zo」的字符会直接匹配出来）</td></tr><tr><td>?</td><td>匹配前面的子表达式零次或者多次，例如，「do(es)?」能匹配到「do」，「does」能匹配到「does」，「doxy」中的「do」。（讲包含「do」或者「does」的字符中的「do」、「does」匹配展现出来）</td></tr><tr><td>{n}</td><td>n 为一个非负整数。匹配确定的 n 次。例如，「o{2}」不能匹配「Bob」中的「o」，但是能匹配「food」的两个 o（o{2}匹配出至少包含 2 个含有 o 的符合对象）</td></tr><tr><td>{n,}</td><td>n 为一个非负整数。至少匹配 n 次。例如，「o{2,}」不能匹配「Bob」中的「o」，但是能匹配「foooooood」的所以的 o（o{2,}匹配出包含大于等于 2 个含有 o 的符合对象），「o{1,}」 等价于 「o+」。「o{0,}」 则等价于 「o*」。</td></tr><tr><td>{n,m}</td><td>m 和 n 均为非负整数，其中 n &lt;= m。最少匹配 n 次且最多匹配 m 次。例如，「o{1,3}」将匹配 「fooooood」 中的前三个 o。「o{0,1}」 等价于 「o?」。请注意在逗号和两个数之间不能有空格。</td></tr></tbody></table><h4 id="特殊符号"><a href="#特殊符号" class="headerlink" title="特殊符号"></a>特殊符号</h4><table><thead><tr><th>特别字符</th><th>描述</th></tr></thead><tbody><tr><td>$</td><td>匹配输入字符全的结尾位置。如果设置了 RegExp 对象的 Multiline 属性，则$也匹配「\n」「\r」。要匹配$字符本身，请使用$ （以下特殊字符均可以使用\形式匹配）</td></tr><tr><td>( )</td><td>标记一个字表达式的开始和结束。子表达式可以获取提供以后使用。</td></tr><tr><td>*</td><td>匹配前面的子表达式零次或者多次。</td></tr><tr><td>+</td><td>匹配前面的子表达式一次或者多次。</td></tr><tr><td>.</td><td>匹配除换行符\n 之外的任何单字符。</td></tr><tr><td>[</td><td>标记一个中括号表达式的开始。</td></tr><tr><td>?</td><td>匹配前面的子表达式零次或者一次，或者指明一个非贪婪限定符。</td></tr><tr><td>\</td><td>将下一个字符标记为或特殊字符、或原义字符、或向后引用、或八进制转义字符。</td></tr><tr><td>^</td><td>匹配输入字符串的开始位置，除非在方括号表达式中使用，此时它表示不接受该字符集合。</td></tr><tr><td>{</td><td>标记限定符表达式的开始。</td></tr><tr><td>|</td><td>指明两项之间的一个选择.</td></tr></tbody></table><h4 id="定位符"><a href="#定位符" class="headerlink" title="定位符"></a>定位符</h4><table><thead><tr><th>字符</th><th>描述</th></tr></thead><tbody><tr><td>^</td><td>匹配输入字符开始的位置</td></tr><tr><td>$</td><td>匹配输入字符结束的位置</td></tr><tr><td>\b</td><td>匹配一个单词边间，即字与空间间的位置</td></tr><tr><td>\B</td><td>非单词边界匹配</td></tr></tbody></table><p>注意：不能将限定符与定位符一起使用。由于在紧靠换行或者单词边界的前面或后面不能有一个以上位置，因此不允许诸如 ^* 之类的表达式。</p><p>若要匹配一行文本开始处的文本，请在正则表达式的开始使用 ^ 字符。不要将 ^ 的这种用法与中括号表达式内的用法混淆。</p><p>若要匹配一行文本的结束处的文本，请在正则表达式的结束处使用 $ 字符。</p><h4 id="正则匹配匹配的一些-demo"><a href="#正则匹配匹配的一些-demo" class="headerlink" title="正则匹配匹配的一些 demo"></a>正则匹配匹配的一些 demo</h4><p>参考：<a href="https://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000/001434499503920bb7b42ff6627420da2ceae4babf6c4f2000" target="_blank" rel="noopener">RegExp-廖雪峰</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">// 匹配大小写、字母和数字</span><br><span class="line">function isReg(reg, con, isGlobal) &#123;</span><br><span class="line">    const res = reg.test(con);</span><br><span class="line">    const execRes = reg.exec(con);</span><br><span class="line">    console.log(res);</span><br><span class="line">    console.log(execRes);</span><br><span class="line"></span><br><span class="line">    if (isGlobal == 1) &#123;</span><br><span class="line">        console.log(res.lastIndex);</span><br><span class="line">        isReg(reg, con, 0);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 可以匹配一个大小写字母、一个数字或者下划线</span><br><span class="line">isReg(/[a-zA-Z0-9\_]/, &apos;_&apos;);</span><br><span class="line">// 可以匹配一个大小写字母、下划线开头，等</span><br><span class="line">isReg(/^([a-zA-Z\$\_])[a-zA-Z0-9\_\$]&#123;0,19&#125;/, &apos;ab2c3&apos;);</span><br><span class="line">// 三个数字+「-」+ 五个字母或者数字</span><br><span class="line">isReg(/^(\d&#123;3&#125;)-(\w&#123;5&#125;)$/, &apos;123-sdaws&apos;);</span><br><span class="line">// 三个数字+「-」或者 空格+ 五个字母或者数字</span><br><span class="line">isReg(/^(\d&#123;3&#125;)(-|\s)(\w&#123;5&#125;)$/, &apos;123 sdaws&apos;);</span><br><span class="line">// 贪婪匹配 [&quot;120300000&quot;, &quot;120300000&quot;, &quot; &quot;, index: 0, input: &quot;120300000&quot;, groups: undefined]</span><br><span class="line">isReg(/^(\d+)(0*)$/, 120300000);</span><br><span class="line">// 非贪婪匹配 （也就是尽可能少匹配,精确匹配)[&quot;120300000&quot;, &quot;1203&quot;, &quot;00000&quot;, index: 0, input: &quot;120300000&quot;, groups: undefined]</span><br><span class="line">isReg(/^(\d+?)(0*)$/, 120300000);</span><br><span class="line">// 全局匹配</span><br><span class="line">isReg(/[a-zA-Z]+Team/g, &apos;sTeam, bTeam, cTeam&apos;, 1);</span><br><span class="line">// 可以验证并提取出带名字的Email地址：</span><br><span class="line">isReg(/^\&lt;(\w+\s?\w+)\&gt;\s?(\w+@\w+\.\w+)$/, &apos;&lt;Tom Paris&gt; tom@voyager.org&apos;);</span><br><span class="line">// 验证Email地址</span><br><span class="line">isReg(/^([a-zA-Z0-9\.\_])+@([0-9]|[A-Za-z])+.(com|org)$/, &apos;szaf93671@126.com&apos;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>你好</title>
      <link href="/2019/02/13/index/"/>
      <url>/2019/02/13/index/</url>
      
        <content type="html"><![CDATA[<p>最近看到很多大牛开始跳槽，我自己想了想，就现有技术而言，万一公司把我开了，好像自己也没地方可以去了，因为自己太菜了，我之前在网上看到一段话，也送给现在正在踌躇是否继续专研技术还是转管理的人</p><blockquote><p>「在公司红利期的成就和业绩并不能代替你现有的成绩，想想自己跳出红利平台和舒适区是否还能继续你的辉煌？」</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 感想 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 感想 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
